{"remainingRequest":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\babel-loader\\lib\\index.js!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!E:\\Codeee\\PPLI FE BE\\PPLI\\src\\components\\section\\ActivitySection.vue?vue&type=template&id=063dedad","dependencies":[{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\src\\components\\section\\ActivitySection.vue","mtime":1657682294000},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\babel.config.js","mtime":1660555071787},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660643185437},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1660643185418},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\babel-loader\\lib\\index.js","mtime":1660643187247},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1660643188787},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660643185437},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1660643187621}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}