{"remainingRequest":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\babel-loader\\lib\\index.js!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\eslint-loader\\index.js??ref--14-0!E:\\Codeee\\PPLI FE BE\\PPLI\\src\\store\\store.js","dependencies":[{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\src\\store\\store.js","mtime":1660536150170},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\babel.config.js","mtime":1660555071787},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660643185437},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1660643185418},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\babel-loader\\lib\\index.js","mtime":1660643187247},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\eslint-loader\\index.js","mtime":1660643185794}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:// All Section data goes here
let SectionData = {
  logoData: [{
    imgClass: 'logo-dark',
    logoImg: require('@/images/logo-black.png'),
    path: '/home'
  }, {
    imgClass: 'logo-light',
    logoImg: require('@/images/logo-white.png'),
    path: '/home'
  }],
  // Faq Data
  faqData: [{
    id: 1,
    heading: 'headingOne',
    nama: 'satu',
    target: '#satu',
    title: 'Question Number 1',
    text: 'lipsumdk abdksadj sdasjdasdjasdkjasjkkk kwkwkwkkwkq lq q'
  }, {
    id: 2,
    heading: 'headingTwo',
    nama: 'dua',
    target: '#dua',
    title: 'QddddE 2',
    text: 'sadahsd sdjasdjaskldjkl jasdkljaskldqwoeqwoeh qwesdbhbh'
  }],
  // Hero data
  heroData: {
    time: '2022-5-30 23:30:00',
    subTitle: 'auction ending in',
    title: 'Swimming into this amazing world',
    subTitleTwo: 'current bid',
    heroPrice: '3.069 ETH',
    heroPriceTwo: '$10,814.02',
    img: require('@/images/thumb/nft.jpg')
  },
  // Hero data two
  heroDataTwo: {
    title: 'Perkumpulan Pelaku Logistik Indonesia',
    content: 'Bergabunglah Bersama Kami Perkumpulan Pelaku Logistik Indonesia',
    img: require('@/images/banner1.png')
  },
  // Hero data three Main
  heroDataThree: {
    title: 'Direktori Logistik!',
    content: 'Mari bersama membangun sinergi Logistik Indonesia dengan integrasi dan pengembangan komunitas bersama'
  },
  // Hero data four
  heroDataFour: {
    title: 'Explore Thousands of Digital Arts and Collectibles',
    subTitle: 'largest nft marketplace'
  },
  // Hero data Five
  heroDataFive: {
    title: 'Search, Explore and Sell your Specific artworks',
    content: "If you are working with any type of Digital NFT Marketplace, NFT Consulting, and Development Firm for every industry then EnftyMart is the best choise to launch your website."
  },
  // Hero data Six
  heroDataSix: {
    title: "Discover, collect, and sell extraordinary NFT's Assets",
    content: 'We are all new crypto-collectibles marketplace from arts, music, games to domains, and many more in the list. Now you can buy & sell rare items.'
  },
  // Hero data Eight
  heroDataEight: [{
    id: 1,
    img: require('@/images/thumb/nft-full.jpg'),
    title: "Discover, collect, and sell extraordinary NFT's Assets",
    content: 'Securely buy and sell unique digital collectibles. Lowest transaction costs across all NFT markets guaranteed.'
  }, {
    id: 2,
    img: require('@/images/thumb/nft-full-2.jpg'),
    title: "Exclusive digital asset",
    content: 'There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some.'
  }, {
    id: 3,
    img: require('@/images/thumb/nft-full-3.jpg'),
    title: "NFT Marketplace Explore, collect, and sell NFTs",
    content: 'If you are working with any type of Digital NFT Marketplace, and Development Firm for every industry then EnftyMat.'
  }],
  // Breadcrumb data
  breadcrumbData: {
    breadcrumbList: {
      title: 'Kartu Nama',
      navList: [{
        title: 'Kartu Nama'
      }]
    },
    breadcrumbListTwo: {
      title: 'Activity',
      navList: [{
        title: 'Activity'
      }]
    },
    breadcrumbListThree: {
      title: 'Ranking',
      navList: [{
        title: 'Ranking'
      }]
    },
    breadcrumbListFour: {
      title: 'Connect Wallet',
      navList: [{
        title: 'Wallet'
      }]
    },
    breadcrumbListFive: {
      title: 'Pengurus',
      navList: [{
        title: 'Pengurus'
      }]
    },
    breadcrumbListSix: {
      title: "Enter Linda Dounia's Cyber Baat World",
      navList: [{
        title: 'Blog'
      }, {
        title: 'Enter Linda Dounia...'
      }]
    },
    breadcrumbListSeven: {
      title: 'How can we help?',
      navList: [{
        title: 'Contact'
      }]
    }
  },
  // Button group data
  btnData: [{
    btnClass: 'btn-primary',
    title: 'Place Bid',
    path: '/product-details-v1-1'
  }, {
    btnClass: 'bg-dark-dim',
    title: 'View',
    titleTwo: 'Artwork',
    path: '/explore'
  }],
  // Hero btn data
  btnDataTwo: [{
    btnClass: 'btn-lg btn-dark',
    title: 'Place a Bid',
    path: '/product-details-v1-1'
  }, {
    btnClass: 'btn-lg bg-dark-dim',
    title: 'View Artwork',
    path: '/explore'
  }],
  // Hero btn data
  btnDataThree: [{
    btnClass: 'btn-lg btn-dark',
    title: 'Gabung jadi Anggota PPLI',
    path: '/register'
  }, {
    btnClass: 'btn-lg btn-outline-dark',
    title: 'Jalin Kemitraan',
    path: '/mitra'
  }],
  // Hero btn data
  btnDataFour: [{
    btnClass: 'btn-lg btn-grad',
    title: 'Register Now',
    path: '/register'
  }, {
    btnClass: 'btn-lg btn-outline-dark',
    title: 'Create Store',
    path: '/create'
  }],
  // Header data
  headerData: {
    abText: 'About Us',
    logText: 'Login',
    btnText: 'Daftar Anggota Baru',
    inputPlaceholderText: 'Search item here...',
    menuList: {
      title: 'Explore',
      navList: [{
        id: 1,
        title: 'Logistic Company',
        path: '/logistic-company'
      }, {
        id: 2,
        title: 'Land Transport Rate',
        path: '/land-trabsport-rate',
        badge: 'Coming soon',
        badgeClass: 'badge text-primary bg-primary-50'
      }, {
        id: 3,
        title: 'Freight Rate',
        path: '/freight-rate',
        badge: 'Coming soon',
        badgeClass: 'badge text-primary bg-primary-50'
      }, {
        id: 4,
        title: 'Freight Qoute Request',
        path: '/freight-qoute-request',
        badge: 'Coming soon',
        badgeClass: 'badge text-primary bg-primary-50'
      }]
    },
    menuList2: {
      title: 'Support',
      navList: [{
        id: 1,
        title: 'Contact',
        path: '/contact'
      }, {
        id: 2,
        title: 'F A Q',
        path: '/faq'
      }, {
        id: 3,
        title: 'Term and Condition',
        path: '/terms'
      }, {
        id: 4,
        title: 'Privacy & Policy',
        path: '/privacy'
      }]
    },
    menuList3: {
      title: 'PPLI',
      navList: [{
        id: 1,
        title: 'Tentang PPLI',
        path: '/about-us'
      }, {
        id: 2,
        title: 'Kepengurusan',
        path: '/pengurus'
      }]
    }
  },
  // Product data Explorrrrr
  productData: {
    title: 'Trending Auctions',
    content: 'This is just a simple text made for this unique and awesome template, you can replace it with any text. It is a long established fact.',
    contentTwo: "Explore on the world's best NFT marketplace with our beautiful NFT products. We want to be a part of your smile.",
    btnText: 'View all auctions',
    btnLink: '/explore',
    btnLinkTwo: '/explore-v3',
    btnLinkThree: '/explore-v4',
    btnLinkFour: '/explore-v5',
    btnLinkFive: '/explore-v6',
    btnTextTwo: 'Load More',
    meta: 'NTFs Products',
    products: [{
      id: 1,
      img: require('@/images/thumb/nft-2.jpg'),
      imgLg: require('@/images/thumb/nft-lg.jpg'),
      title: 'PT. One Tribe Black Edition',
      content: 'Digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse asdasjdaskdlsamdb sadasdjasdj kjasdkasjd fhjahf sfjasfkl;afjkl fa fasfjklasfasfjaklfas fasfijowqiqofqwfafosf sfioasfqwfwqiosf afasfiosfsfaioqwfjaskl fajkfljqwfjoqwpfjqjfpqjowjfwqiofqjqofjkls fsnaklfas fsal;dadad sdafasfsfqfq wf qwqwrasdafafafasfqwfqwrqwrqaddasdsda',
      alamat: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: 14,
      priceTwo: 1.32,
      berdiri: '1999',
      //////////////////////////////////// batas data
      kantorUtama: 'Jl. Bangka No 1 Tanjung Priok',
      wilayah: 'DKI Jakarta',
      kota: 'Jakarta Utara',
      noHp: '085643237818',
      email: 'alif.nurrokhman@agungfreight.co.id',
      website: 'https://agungfreight.co.id ',
      hariKerja: 'Monday - Friday',
      jamKerja: '8am - 5pm',
      ///////////////////////////////////
      metaText: 'Not for sale',
      metaTextTwo: '500 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">0.072 ETH</span>',
      avatar: require('@/images/thumb/avatar.jpg'),
      userName: '@zenicon_studio',
      followersText: '1.3k Followers',
      authorName: 'Zenicon Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'art',
      category: 'trucking',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 2,
      img: require('@/images/thumb/nft3.jpg'),
      imgLg: require('@/images/thumb/nft-lg2.jpg'),
      title: 'Operation Jade Fury',
      content: 'Bazzors is a tiny buzzing, electrifying and irascible Elfin. Bazzors appear intermittently during thunderstorms in the Elfin Kingdom ',
      alamat: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      author: 'CanvaNetwork',
      authorLink: '/author',
      price: 10,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      userName: '@canva_network',
      followersText: '1.3k Followers',
      authorName: 'Canva Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'trucking',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 3,
      img: require('@/images/thumb/nft4.jpg'),
      imgLg: require('@/images/thumb/nft-lg3.jpg'),
      title: 'Unboxing The Compass',
      content: 'According to our idea, REAL BORED APE would look exactly like this. Have you ever seen this tough guy on the streets of your city?',
      alamat: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      author: 'MoveNetwork',
      authorLink: '/author',
      price: 8.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      userName: '@move_network',
      followersText: '1.3k Followers',
      authorName: 'Move Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'trucking',
      itemToShow: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 4,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      alamat: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      author: 'RukiStudio',
      authorLink: '/author',
      price: 11.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      userName: '@ruki_studio',
      followersText: '1.3k Followers',
      authorName: 'Ruki Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'trucking',
      itemToShow: 'show',
      itemToShowSingle: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 5,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      alamat: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      author: 'RukiStudio',
      authorLink: '/author',
      price: 11.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      userName: '@ruki_studio',
      followersText: '1.3k Followers',
      authorName: 'Ruki Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'warehouse',
      itemToShow: 'show',
      itemToShowSingle: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }]
  },
  // Product data
  productData1: {
    products: [{
      id: 1,
      img: require('@/images/thumb/nft-2.jpg'),
      imgLg: require('@/images/thumb/nft-lg.jpg'),
      title: 'KKARAOKE',
      content: 'Digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: 14,
      priceTwo: 1.32,
      metaText: 'Not for sale',
      metaTextTwo: '500 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">0.072 ETH</span>',
      avatar: require('@/images/thumb/avatar.jpg'),
      userName: '@zenicon_studio',
      followersText: '1.3k Followers',
      authorName: 'Zenicon Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'art',
      category: 'art',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 2,
      img: require('@/images/thumb/nft3.jpg'),
      imgLg: require('@/images/thumb/nft-lg2.jpg'),
      title: 'Operation Jade Fury',
      content: 'Bazzors is a tiny buzzing, electrifying and irascible Elfin. Bazzors appear intermittently during thunderstorms in the Elfin Kingdom ',
      author: 'CanvaNetwork',
      authorLink: '/author',
      price: 10,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      userName: '@canva_network',
      followersText: '1.3k Followers',
      authorName: 'Canva Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 3,
      img: require('@/images/thumb/nft4.jpg'),
      imgLg: require('@/images/thumb/nft-lg3.jpg'),
      title: 'Unboxing The Compass',
      content: 'According to our idea, REAL BORED APE would look exactly like this. Have you ever seen this tough guy on the streets of your city?',
      author: 'MoveNetwork',
      authorLink: '/author',
      price: 8.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      userName: '@move_network',
      followersText: '1.3k Followers',
      authorName: 'Move Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 4,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'RukiStudio',
      authorLink: '/author',
      price: 11.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      userName: '@ruki_studio',
      followersText: '1.3k Followers',
      authorName: 'Ruki Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowSingle: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 5,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'RukiStudio',
      authorLink: '/author',
      price: 11.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      userName: '@ruki_studio',
      followersText: '1.3k Followers',
      authorName: 'Ruki Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowSingle: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }]
  },
  // Product data
  productData2: {
    products: [{
      id: 1,
      img: require('@/images/thumb/nft-2.jpg'),
      imgLg: require('@/images/thumb/nft-lg.jpg'),
      title: 'SEMAR MESEM',
      content: 'Digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: 14,
      priceTwo: 1.32,
      metaText: 'Not for sale',
      metaTextTwo: '500 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">0.072 ETH</span>',
      avatar: require('@/images/thumb/avatar.jpg'),
      userName: '@zenicon_studio',
      followersText: '1.3k Followers',
      authorName: 'Zenicon Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'art',
      category: 'art',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 2,
      img: require('@/images/thumb/nft3.jpg'),
      imgLg: require('@/images/thumb/nft-lg2.jpg'),
      title: 'Operation Jade Fury',
      content: 'Bazzors is a tiny buzzing, electrifying and irascible Elfin. Bazzors appear intermittently during thunderstorms in the Elfin Kingdom ',
      author: 'CanvaNetwork',
      authorLink: '/author',
      price: 10,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      userName: '@canva_network',
      followersText: '1.3k Followers',
      authorName: 'Canva Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 3,
      img: require('@/images/thumb/nft4.jpg'),
      imgLg: require('@/images/thumb/nft-lg3.jpg'),
      title: 'Unboxing The Compass',
      content: 'According to our idea, REAL BORED APE would look exactly like this. Have you ever seen this tough guy on the streets of your city?',
      author: 'MoveNetwork',
      authorLink: '/author',
      price: 8.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      userName: '@move_network',
      followersText: '1.3k Followers',
      authorName: 'Move Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 4,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'RukiStudio',
      authorLink: '/author',
      price: 11.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      userName: '@ruki_studio',
      followersText: '1.3k Followers',
      authorName: 'Ruki Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowSingle: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }]
  },
  // Product data
  productData3: {
    products: [{
      id: 1,
      img: require('@/images/thumb/nft-2.jpg'),
      imgLg: require('@/images/thumb/nft-lg.jpg'),
      title: 'makan ayam',
      content: 'Digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: 14,
      priceTwo: 1.32,
      metaText: 'Not for sale',
      metaTextTwo: '500 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">0.072 ETH</span>',
      avatar: require('@/images/thumb/avatar.jpg'),
      userName: '@zenicon_studio',
      followersText: '1.3k Followers',
      authorName: 'Zenicon Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'art',
      category: 'art',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 2,
      img: require('@/images/thumb/nft3.jpg'),
      imgLg: require('@/images/thumb/nft-lg2.jpg'),
      title: 'Operation Jade Fury',
      content: 'Bazzors is a tiny buzzing, electrifying and irascible Elfin. Bazzors appear intermittently during thunderstorms in the Elfin Kingdom ',
      author: 'CanvaNetwork',
      authorLink: '/author',
      price: 10,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      userName: '@canva_network',
      followersText: '1.3k Followers',
      authorName: 'Canva Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowTwo: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 3,
      img: require('@/images/thumb/nft4.jpg'),
      imgLg: require('@/images/thumb/nft-lg3.jpg'),
      title: 'Unboxing The Compass',
      content: 'According to our idea, REAL BORED APE would look exactly like this. Have you ever seen this tough guy on the streets of your city?',
      author: 'MoveNetwork',
      authorLink: '/author',
      price: 8.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      userName: '@move_network',
      followersText: '1.3k Followers',
      authorName: 'Move Network',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 4,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'RukiStudio',
      authorLink: '/author',
      price: 11.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      userName: '@ruki_studio',
      followersText: '1.3k Followers',
      authorName: 'Ruki Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowSingle: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }, {
      id: 5,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'RukiStudio',
      authorLink: '/author',
      price: 11.00,
      priceTwo: 0.32,
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      userName: '@ruki_studio',
      followersText: '1.3k Followers',
      authorName: 'Ruki Studio',
      desc: 'Complete account of the system, and expound the actual things.',
      name: 'music',
      category: 'music',
      itemToShow: 'show',
      itemToShowSingle: 'show',
      avatars: [{
        id: 1,
        img: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        img: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        img: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }, {
        id: 4,
        img: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 5,
        img: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }]
    }],
    onSaleList: [{
      id: 1,
      img: require('@/images/thumb/nft-2.jpg'),
      imgLg: require('@/images/thumb/nft-lg.jpg'),
      title: 'One Tribe Black Edition',
      content: 'Digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: '14.20',
      priceTwo: '1.32',
      metaText: 'Not for sale',
      metaTextTwo: '500 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">0.072 ETH</span>'
    }, {
      id: 2,
      img: require('@/images/thumb/nft3.jpg'),
      imgLg: require('@/images/thumb/nft-lg2.jpg'),
      title: 'Operation Jade Fury',
      content: 'Bazzors is a tiny buzzing, electrifying and irascible Elfin. Bazzors appear intermittently during thunderstorms in the Elfin Kingdom ',
      author: 'CanvaNetwork',
      authorLink: '/author',
      price: '10.00',
      priceTwo: '0.32',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 3,
      img: require('@/images/thumb/nft4.jpg'),
      imgLg: require('@/images/thumb/nft-lg3.jpg'),
      title: 'Unboxing The Compass',
      content: 'According to our idea, REAL BORED APE would look exactly like this. Have you ever seen this tough guy on the streets of your city?',
      author: 'MoveNetwork',
      authorLink: '/author',
      price: '8.00',
      priceTwo: '0.32',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 4,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'RukiStudio',
      authorLink: '/author',
      price: '11.00',
      priceTwo: '0.32',
      metaText: 'Not for sale',
      metaTextTwo: '300 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 5,
      img: require('@/images/thumb/nft6.jpg'),
      imgLg: require('@/images/thumb/nft-lg5.jpg'),
      title: 'Divine Opulence',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'DvisionNetwork',
      authorLink: '/author',
      price: '12.00',
      priceTwo: '1.44',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">2.072 ETH</span>'
    }, {
      id: 6,
      img: require('@/images/thumb/nft7.jpg'),
      imgLg: require('@/images/thumb/nft-lg6.jpg'),
      title: 'Sacral Metatron Cube',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'KamranMedia',
      authorLink: '/author',
      price: '11.00',
      priceTwo: '2.33',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }],
    ownedList: [{
      id: 1,
      img: require('@/images/thumb/nft4.jpg'),
      imgLg: require('@/images/thumb/nft-lg3.jpg'),
      title: 'Unboxing The Compass',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: '14.20',
      priceTwo: '1.32',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 2,
      img: require('@/images/thumb/nft5.jpg'),
      imgLg: require('@/images/thumb/nft-lg4.jpg'),
      title: 'Rendering by the Water',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: '14.20',
      priceTwo: '1.32',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 3,
      img: require('@/images/thumb/nft-2.jpg'),
      imgLg: require('@/images/thumb/nft-lg.jpg'),
      title: 'One Tribe Black Edition',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: '14.20',
      priceTwo: '1.32',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 4,
      img: require('@/images/thumb/nft3.jpg'),
      imgLg: require('@/images/thumb/nft-lg2.jpg'),
      title: 'Operation Jade Fury',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'ZeniconStudio',
      authorLink: '/author',
      price: '14.20',
      priceTwo: '1.32',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 5,
      img: require('@/images/thumb/nft6.jpg'),
      imgLg: require('@/images/thumb/nft-lg5.jpg'),
      title: 'Divine Opulence',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'DvisionNetwork',
      authorLink: '/author',
      price: '12.00',
      priceTwo: '1.44',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }, {
      id: 6,
      img: require('@/images/thumb/nft7.jpg'),
      imgLg: require('@/images/thumb/nft-lg6.jpg'),
      title: 'Sacral Metatron Cube',
      content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
      author: 'KamranMedia',
      authorLink: '/author',
      price: '11.00',
      priceTwo: '1.44',
      metaText: 'Not for sale',
      metaTextTwo: '200 editions',
      metaTextThree: 'Highest bid <span class="text-primary fw-semibold">1.072 ETH</span>'
    }]
  },
  // Related Product data
  relatedProductData: {
    title: 'Popular Art Assets'
  },
  // creator data
  creatorData: {
    title: 'Featured Creators',
    meta: 'Our Creators',
    content: "Explore on the world's best NFT marketplace with our beautiful NFT products creators. We want to be a part of your smile.",
    creatorList: [{
      id: 1,
      title: '@nathan_walls',
      subTitle: '24.13 ETH',
      img: require('@/images/thumb/avatar.jpg'),
      path: '/author'
    }, {
      id: 2,
      title: '@alex_smith',
      subTitle: '12.24 ETH',
      img: require('@/images/thumb/avatar-2.jpg'),
      path: '/author'
    }, {
      id: 3,
      title: '@kevin_martin',
      subTitle: '13.57 ETH',
      img: require('@/images/thumb/avatar-3.jpg'),
      path: '/author'
    }, {
      id: 4,
      title: '@david_martin',
      subTitle: '34.13 ETH',
      img: require('@/images/thumb/avatar-4.jpg'),
      path: '/author'
    }, {
      id: 5,
      title: '@jhonatan_doe',
      subTitle: '23.24 ETH',
      img: require('@/images/thumb/avatar-5.jpg'),
      path: '/author'
    }, {
      id: 6,
      title: '@mark_hardson',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-6.jpg'),
      path: '/author'
    }],
    creatorListTwo: [{
      id: 1,
      title: 'Nathan Walls',
      subTitle: '24.13 ETH',
      img: require('@/images/thumb/avatar.jpg'),
      path: '/author'
    }, {
      id: 2,
      title: 'Alex Smith',
      subTitle: '12.24 ETH',
      img: require('@/images/thumb/avatar-2.jpg'),
      path: '/author'
    }, {
      id: 3,
      title: 'Kevin Martin',
      subTitle: '13.57 ETH',
      img: require('@/images/thumb/avatar-3.jpg'),
      path: '/author'
    }, {
      id: 4,
      title: 'David Martin',
      subTitle: '34.13 ETH',
      img: require('@/images/thumb/avatar-4.jpg'),
      path: '/author'
    }, {
      id: 5,
      title: 'Jhonatan Doe',
      subTitle: '23.24 ETH',
      img: require('@/images/thumb/avatar-5.jpg'),
      path: '/author'
    }, {
      id: 6,
      title: 'Mark Hardson',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-6.jpg'),
      path: '/author'
    }, {
      id: 7,
      title: 'Gayle Hicks',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-7.jpg'),
      path: '/author'
    }, {
      id: 8,
      title: 'Claude Banks',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-8.jpg'),
      path: '/author'
    }, {
      id: 9,
      title: 'Stacy Long',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-9.jpg'),
      path: '/author'
    }, {
      id: 10,
      title: 'Fred Ryan',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-10.jpg'),
      path: '/author'
    }, {
      id: 11,
      title: 'Franklin Greer',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-11.jpg'),
      path: '/author'
    }, {
      id: 12,
      title: 'Karla Sharp',
      subTitle: '34.57 ETH',
      img: require('@/images/thumb/avatar-12.jpg'),
      path: '/author'
    }]
  },
  // collection data
  collectionData: {
    title: 'Collections',
    collectionList: [{
      id: 1,
      title: 'Crappy Dogecoin',
      price: '$26,220',
      img: require('@/images/thumb/art-5.jpg'),
      avatar: require('@/images/thumb/avatar.jpg'),
      path: ''
    }, {
      id: 2,
      title: 'Savage Dogs',
      price: '$24,497',
      img: require('@/images/thumb/art-6.jpg'),
      avatar: require('@/images/thumb/avatar-2.jpg'),
      path: ''
    }, {
      id: 3,
      title: 'Crappy Dogecoin',
      price: '$26,220',
      img: require('@/images/thumb/art-7.jpg'),
      avatar: require('@/images/thumb/avatar-3.jpg'),
      path: ''
    }, {
      id: 4,
      title: 'Crypto Krills',
      price: '$11,356',
      img: require('@/images/thumb/art-8.jpg'),
      avatar: require('@/images/thumb/avatar-4.jpg'),
      path: ''
    }, {
      id: 5,
      title: 'Chibi Doge',
      price: '$4,234',
      img: require('@/images/thumb/art-9.jpg'),
      avatar: require('@/images/thumb/avatar-5.jpg'),
      path: ''
    }]
  },
  sellBuyData: [{
    id: 1,
    img: require('@/images/thumb/buy.png'),
    title: 'Buy NFT Products',
    content: 'Purchase digital NFT products from the biggest directory.',
    btnText: 'Get Started',
    btnLink: '/register'
  }, {
    id: 2,
    img: require('@/images/thumb/sell.png'),
    title: 'Sell Your NFT Products',
    content: 'Sell one of your NFT products to make a huge profit.',
    btnText: 'Start Selling',
    btnLink: '/create'
  }],
  // itemDetail data
  itemDetailData: {
    img: require('@/images/thumb/nft-lg.jpg'),
    imgTwo: require('@/images/thumb/item-detail-2.jpg'),
    title: 'The Future is Blossoming - Harlows 2021',
    content: 'Limited Edition *digital-only* "CB Galaxy" style Coke Boys LA sneakers wearable in the Decentraland metaverse',
    metaText: 'Not for sale',
    metaTextTwo: '500 editions',
    metaTextThree: 'Highest bid 0.072 ETH',
    btnText: 'Place a Bid',
    btnTextTwo: 'Share',
    itemDetailTabNav: [{
      id: 1,
      isActive: 'active',
      title: 'Owners',
      slug: 'owners-tab',
      bsTarget: '#owners'
    }, {
      id: 2,
      title: 'Bids',
      slug: 'bids-tab',
      bsTarget: '#bids'
    }, {
      id: 3,
      title: 'History',
      slug: 'history-tab',
      bsTarget: '#history'
    }],
    itemDetailOwnerList: [{
      id: 1,
      title: 'French Montana',
      subTitle: '450 editions not for sale',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      path: '/author'
    }, {
      id: 2,
      title: 'Beejaey',
      subTitle: '6 editions not for sale',
      avatar: require('@/images/thumb/avatar-5.jpg'),
      path: '/author'
    }, {
      id: 3,
      title: 'Tom Dracula',
      subTitle: '24 editions not for sale',
      avatar: require('@/images/thumb/avatar-6.jpg'),
      path: '/author'
    }],
    itemDetailOwnerListTwo: {
      title: 'Owners',
      ownerList: [{
        id: 1,
        title: 'French Montana',
        subTitle: '450 editions not for sale',
        avatar: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 2,
        title: 'Beejaey',
        subTitle: '6 editions not for sale',
        avatar: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }, {
        id: 3,
        title: 'Tom Dracula',
        subTitle: '24 editions not for sale',
        avatar: require('@/images/thumb/avatar-6.jpg'),
        path: '/author'
      }]
    },
    itemDetailBidsList: [{
      id: 1,
      title: '0.072 ETH by Palliman for 1 edition',
      date: '21/09/2021',
      avatar: require('@/images/thumb/avatar.jpg'),
      path: '/author'
    }, {
      id: 2,
      title: '0.072 ETH by KingKhalid for 1 edition',
      date: '14/08/2021',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      path: '/author'
    }, {
      id: 3,
      title: '0.072 ETH by Kamran for 1 edition',
      date: '12/07/2021',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      path: '/author'
    }],
    itemDetailBidsListTwo: {
      title: 'Bids',
      bidsList: [{
        id: 1,
        title: '0.072 ETH by Palliman for 1 edition',
        date: '21/09/2021',
        avatar: require('@/images/thumb/avatar.jpg'),
        path: '/author'
      }, {
        id: 2,
        title: '0.072 ETH by KingKhalid for 1 edition',
        date: '14/08/2021',
        avatar: require('@/images/thumb/avatar-2.jpg'),
        path: '/author'
      }, {
        id: 3,
        title: '0.072 ETH by Kamran for 1 edition',
        date: '12/07/2021',
        avatar: require('@/images/thumb/avatar-3.jpg'),
        path: '/author'
      }]
    },
    itemDetailHistoryList: [{
      id: 1,
      title: 'Listed 1 edition for 0.35 ETH',
      subTitle: 'by Medicom 21 hours ago',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      path: '/author'
    }, {
      id: 2,
      title: 'Purchased 1 edition for 0.1 ETH',
      subTitle: 'by Medicom 21 hours ago',
      avatar: require('@/images/thumb/avatar-5.jpg'),
      path: '/author'
    }, {
      id: 3,
      title: 'Purchased 1 edition for 0.1 ETH',
      subTitle: 'by French Montana 23/09/2021',
      avatar: require('@/images/thumb/avatar-6.jpg'),
      path: '/author'
    }],
    itemDetailHistoryListTwo: {
      title: 'History',
      historyList: [{
        id: 1,
        title: 'Listed 1 edition for 0.35 ETH',
        subTitle: 'by Medicom 21 hours ago',
        avatar: require('@/images/thumb/avatar-4.jpg'),
        path: '/author'
      }, {
        id: 2,
        title: 'Purchased 1 edition for 0.1 ETH',
        subTitle: 'by Medicom 21 hours ago',
        avatar: require('@/images/thumb/avatar-5.jpg'),
        path: '/author'
      }, {
        id: 3,
        title: 'Purchased 1 edition for 0.1 ETH',
        subTitle: 'by French Montana 23/09/2021',
        avatar: require('@/images/thumb/avatar-6.jpg'),
        path: '/author'
      }]
    },
    itemDetailList: [{
      id: 1,
      title: '@nathan_walls',
      subTitle: 'Creator',
      avatar: require('@/images/thumb/avatar.jpg'),
      path: '/author'
    }, {
      id: 2,
      title: '@kamran_ahmed',
      subTitle: 'Collection',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      path: '/author'
    }],
    itemDetailListTwo: [{
      title: 'Highest bid by Palliman',
      titleTwo: 'Palliman',
      subTitle: '0.072 ETH',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      path: '/author'
    }]
  },
  // Freatured creator data
  featuredCreatorsData: {
    title: 'Featured Creators',
    content: 'This is just a simple text made for this unique and awesome template, you can replace it with any text. It is a long established fact.',
    btnText: 'View all creators',
    featuredList: [{
      id: 1,
      img: require('@/images/thumb/art.jpg'),
      avatar: require('@/images/thumb/avatar.jpg'),
      title: 'Takeshi Murata',
      content: 'Complete account of the system, and expound the actual things.',
      followerNum: '756',
      followerText: 'Followers',
      followingNum: '30',
      followingText: 'Following',
      soldText: '3.45 ETH Last Sold',
      followText: 'Follow',
      btnLink: '/author'
    }, {
      id: 2,
      img: require('@/images/thumb/art-2.jpg'),
      avatar: require('@/images/thumb/avatar-2.jpg'),
      title: 'Alex Smith',
      content: 'Complete account of the system, and expound the actual things.',
      followerNum: '202',
      followerText: 'Followers',
      followingNum: '10',
      followingText: 'Following',
      soldText: '1.23 ETH Last Sold',
      followText: 'Follow',
      btnLink: '/author'
    }, {
      id: 3,
      img: require('@/images/thumb/art-3.jpg'),
      avatar: require('@/images/thumb/avatar-3.jpg'),
      title: 'Kevin Martin',
      content: 'Complete account of the system, and expound the actual things.',
      followerNum: '343',
      followerText: 'Followers',
      followingNum: '50',
      followingText: 'Following',
      soldText: '23.34 ETH Last Sold',
      followText: 'Follow',
      btnLink: '/author'
    }, {
      id: 4,
      img: require('@/images/thumb/art-4.jpg'),
      avatar: require('@/images/thumb/avatar-4.jpg'),
      title: 'Jhonatan Doe',
      content: 'Complete account of the system, and expound the actual things.',
      followerNum: '315',
      followerText: 'Followers',
      followingNum: '80',
      followingText: 'Following',
      soldText: '2.34 ETH Last Sold',
      followText: 'Follow',
      btnLink: '/author'
    }]
  },
  // Freatured data
  featuredData: {
    title: 'Exclusive EnftyMart drops',
    content: 'This is just a simple text made for this unique and awesome template, you can replace it with any text. It is a long established fact.',
    featuredList: [{
      id: 1,
      img: require('@/images/thumb/art.jpg'),
      title: 'Seasons by AlexSmith',
      content: "AlexSmith's Summer Collection featuring Time",
      path: '/item-details'
    }, {
      id: 2,
      img: require('@/images/thumb/art-2.jpg'),
      title: 'Kavin Martin EnftyMart.io',
      content: 'After a sold-out Art Blocks drop, Martin is back with',
      path: '/item-details'
    }, {
      id: 3,
      img: require('@/images/thumb/art-3.jpg'),
      title: 'Kavin Martin EnftyMart.io',
      content: 'After a sold-out Art Blocks drop, Martin is back with',
      path: '/item-details'
    }, {
      id: 4,
      img: require('@/images/thumb/art-4.jpg'),
      title: 'Tyronejkd Universe',
      content: 'After a sold-out Art Blocks drop, Martin is back with',
      path: '/item-details'
    }]
  },
  // counter item data
  countItemData: [{
    id: 1,
    title: '259K+',
    text: 'NFTs Minted',
    className: 'col-6'
  }, {
    id: 2,
    title: '$11M+',
    text: 'Trading Volume',
    className: 'col-6'
  }, {
    id: 3,
    title: '24K+',
    text: 'Creative Creators'
  }],
  // Recent item data
  recentItemData: {
    title: 'Freight Forwarder',
    content: ''
  },
  // Recent item data 1
  recentItemData1: {
    title: 'Trucking',
    content: ''
  },
  // Recent item data 1
  recentItemData2: {
    title: 'Warehouse',
    content: ''
  },
  // Recent item data 1
  recentItemData3: {
    title: 'More',
    content: ''
  },
  // how It Work Data
  howItWorkData: {
    title: 'Create and sell your NFTs',
    content: 'Kami Membawa hal-hal terbaik untuk Anda',
    titleTwo: 'Solusi & unsur Kekuatan Logistics Indonesia',
    titleThree: 'Kami Membawa hal-hal terbaik untuk Anda',
    btnText: 'Create Store',
    howItWorkList: [{
      id: 1,
      icon: 'icon fa-solid fa-shopping-cart icon-lg icon-circle shadow-sm icon-wbg mx-auto mb-4 text-primary',
      title: 'UKM Logistics Marketplace',
      content: 'Once you’ve set up your wallet of choice, connect it to EnftyMart by clicking the'
    }, {
      id: 2,
      icon: 'icon ni ni-file-text icon-lg icon-circle shadow-sm icon-wbg mx-auto mb-4 text-danger',
      title: 'Regulasi dan Legalitas',
      content: 'Click <a href="profile" class="btn-link">My Collections</a> and set up your collection. Add social links, a description'
    }, {
      id: 3,
      icon: 'icon ni ni-camera icon-lg icon-circle shadow-sm icon-wbg mx-auto mb-4 text-info',
      title: 'Inovasi Technologi',
      content: 'Upload your work (image, video, audio, or 3D art), add a title and description'
    }],
    howItWorkList2: [{
      id: 1,
      icon: 'icon fa fa-file-signature icon-lg icon-circle shadow-sm icon-wbg mx-auto mb-4 text-warning',
      title: 'Contract Logistics',
      content: 'Choose between auctions, fixed-price listings, and declining-price listings.'
    }, {
      id: 2,
      icon: 'icon fa fa-users icon-lg icon-circle shadow-sm icon-wbg mx-auto mb-4 text-success',
      title: 'Networking',
      content: 'Choose between auctions, fixed-price listings, and declining-price listings.'
    }, {
      id: 3,
      icon: 'icon fa fa-graduation-cap icon-lg icon-circle shadow-sm icon-wbg mx-auto mb-4 text-pink',
      title: 'Educational solutions',
      content: 'Choose between auctions, fixed-price listings, and declining-price listings.'
    }],
    howItWorkListTwo: [{
      id: 1,
      icon: 'icon ni ni-wallet icon-md icon-rounded icon-wbg mx-auto mb-4 text-white bg-blue',
      title: 'Set up your wallet'
    }, {
      id: 2,
      icon: 'icon ni ni-file-text icon-md icon-rounded icon-wbg mx-auto mb-4 text-white bg-purple',
      title: 'Create collection'
    }, {
      id: 3,
      icon: 'icon ni ni-camera icon-md icon-rounded icon-wbg mx-auto mb-4 text-white bg-pink',
      title: 'Add your NFTs'
    }, {
      id: 4,
      icon: 'icon ni ni-money icon-md icon-rounded icon-wbg mx-auto mb-4 text-white bg-orange',
      title: 'List them for sale'
    }],
    howItWorkListThree: [{
      id: 1,
      icon: 'icon ni ni-wallet icon-md icon-circle icon-wbg me-3 text-blue bg-blue-100',
      title: 'Set up your wallet',
      content: 'Once you’ve set up your wallet of choice, connect it to EnftyMart by clicking the wallet icon.'
    }, {
      id: 2,
      icon: 'icon ni ni-file-text icon-md icon-circle icon-wbg me-3 text-purple bg-purple-100',
      title: 'Create collection',
      content: 'Click <a href="/profile" class="btn-link">My Collections</a> and set up your collection. Add social links, a description of item.'
    }, {
      id: 3,
      icon: 'icon ni ni-camera icon-md icon-circle icon-wbg me-3 text-pink bg-pink-100',
      title: 'Add your NFTs',
      content: 'Upload your work (image, video, audio, or 3D art), add a title and description to item.'
    }, {
      id: 4,
      icon: 'icon ni ni-money icon-md icon-circle icon-wbg me-3 text-orange bg-orange-100',
      title: 'List them for sale',
      content: 'Choose between auctions, fixed-price listings, and declining-price listings of item.'
    }],
    howItWorkListFour: [{
      id: 1,
      title: 'What is a non-fungible token (NFT)?',
      content: 'A non-fungible token (NFT) is a cryptographic token that represents a unique asset. They function as verifiable proofs of authenticity and ownership within a blockchain network.'
    }, {
      id: 2,
      title: 'What is EnftyMart NFT Marketplace?',
      content: 'EnftyMart NFT Marketplace brings together artists, creators, and crypto enthusiasts on a single platform to create and trade top NFTs. The platform features 3 product lines.'
    }, {
      id: 3,
      title: 'How do I create an NFT?',
      content: 'Click [Create] and choose your file to upload. We currently support JPG, PNG, GIF, PDF, MP4, MP3, MPEG, AVI, WAV, and SVG. Please note that your NFT cannot be changed.'
    }, {
      id: 4,
      title: 'How do I buy an NFT?',
      content: 'For NFTs with a fixed price, click the [Buy] button on the product page and complete the transaction. Once the transaction is successful, we will transfer the NFT to your wallet.'
    }, {
      id: 5,
      title: 'How do I sell an NFT?',
      content: 'To list an NFT for sale, our team will first of all approve the content to make sure it’s appropriate for listing. This process usually takes 4-8 hours. Upon successful approval.'
    }],
    tabNav: [{
      id: 1,
      isActive: 'active',
      title: 'Connect Your Wallet',
      slug: 'pills-connect-wallet-tab',
      bsTarget: '#pills-connect-wallet'
    }, {
      id: 2,
      title: 'Create Your NFT Store',
      slug: 'pills-create-nft-store-tab',
      bsTarget: '#pills-create-nft-store'
    }, {
      id: 3,
      title: 'Start Selling & Growing',
      slug: 'pills-start-selling-tab',
      bsTarget: '#pills-start-selling'
    }]
  },
  // Setting Umum Data
  settingUmumData: {
    title: 'Umum',
    content: 'Lihat dan cari perusahaan logistik yang sesuai dengan kebutuhan layanan yang anda cari.',
    settingUmumList: [{
      id: 1,
      class: 'text-green',
      icon: 'icon fa fa-map-o mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Wilayah',
      path: '/wilayah',
      if: ""
    }, {
      id: 3,
      class: 'text-blue',
      icon: 'icon fa fa-building-o mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'City',
      path: '/city'
    }, {
      id: 4,
      class: 'text-orange',
      icon: 'icon fa fa-map-signs mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Provinsi',
      path: '/provinsi',
      if: "checkPrivilege('provinsi-index')"
    }]
  },
  // Setting Umum Data
  settingOrgData: {
    title: 'Organization',
    content: 'Lihat dan cari perusahaan logistik yang sesuai dengan kebutuhan layanan yang anda cari.',
    settingOrgList: [{
      id: 1,
      class: 'text-green',
      icon: 'icon fa fa-user-circle mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Pengurus',
      path: '/pengurusdata'
    }, {
      id: 2,
      class: 'text-pink',
      icon: 'icon fa fa-address-card-o mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Jabatan',
      path: '/jabatan'
    } // {
    //   id: 3,
    //   class: 'text-blue',
    //   icon: 'icon fa-solid fa-water mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Sea Freight',
    //   path: '/explore'
    // },
    // {
    //   id: 4,
    //   class: 'text-orange',
    //   icon: 'icon fa-solid fa-warehouse mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Warehouse',
    //   path: '/explore'
    // },
    // {
    //   id: 5,
    //   class: 'text-yellow',
    //   icon: 'icon fa fa-truck-fast mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Express Service',
    //   path: '/explore'
    // },
    // {
    //   id: 6,
    //   class: 'text-green',
    //   icon: 'icon ni ni-opt-alt-fill mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Custom Clearance',
    //   path: '/explore'
    // },
    // {
    //   id: 7,
    //   class: 'text-teal',
    //   icon: 'icon fa-solid fa-shield mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Cargo insurance',
    //   path: '/explore'
    // },
    // {
    //   id: 8,
    //   class: 'text-cyan',
    //   icon: 'icon ni ni-setting mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Others',
    //   path: '/explore'
    // }
    ]
  },
  // Setting Umum Data
  homeAdminData: {
    title: 'Organization',
    content: 'Lihat dan cari perusahaan logistik yang sesuai dengan kebutuhan layanan yang anda cari.',
    homeAdminList: [{
      id: 1,
      class: 'text-green',
      icon: 'icon fa fa-user-circle mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Pengurus',
      path: '/pengurusdata'
    }, {
      id: 2,
      class: 'text-pink',
      icon: 'icon fa fa-address-card-o mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Jabatan',
      path: '/jabatan'
    } // {
    //   id: 3,
    //   class: 'text-blue',
    //   icon: 'icon fa-solid fa-water mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Sea Freight',
    //   path: '/explore'
    // },
    // {
    //   id: 4,
    //   class: 'text-orange',
    //   icon: 'icon fa-solid fa-warehouse mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Warehouse',
    //   path: '/explore'
    // },
    // {
    //   id: 5,
    //   class: 'text-yellow',
    //   icon: 'icon fa fa-truck-fast mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Express Service',
    //   path: '/explore'
    // },
    // {
    //   id: 6,
    //   class: 'text-green',
    //   icon: 'icon ni ni-opt-alt-fill mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Custom Clearance',
    //   path: '/explore'
    // },
    // {
    //   id: 7,
    //   class: 'text-teal',
    //   icon: 'icon fa-solid fa-shield mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Cargo insurance',
    //   path: '/explore'
    // },
    // {
    //   id: 8,
    //   class: 'text-cyan',
    //   icon: 'icon ni ni-setting mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Others',
    //   path: '/explore'
    // }
    ]
  },
  // Category Data
  categoryData: {
    title: 'Kategori',
    content: 'Lihat dan cari perusahaan logistik yang sesuai dengan kebutuhan layanan yang anda cari.',
    categoryList: [{
      id: 1,
      class: 'text-green',
      icon: 'icon fa-solid fa-plane mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Freight Forwarder',
      path: '/explore'
    }, {
      id: 2,
      class: 'text-pink',
      icon: 'icon ni ni-truck mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Trucks',
      path: '/explore'
    }, // {
    //   id: 3,
    //   class: 'text-blue',
    //   icon: 'icon fa-solid fa-water mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Sea Freight',
    //   path: '/explore'
    // },
    {
      id: 4,
      class: 'text-orange',
      icon: 'icon fa-solid fa-warehouse mx-auto icon-circle icon-wbg icon-lg',
      title: 'Warehouse',
      path: '/explore'
    }, // {
    //   id: 5,
    //   class: 'text-yellow',
    //   icon: 'icon fa fa-truck-fast mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Express Service',
    //   path: '/explore'
    // },
    // {
    //   id: 6,
    //   class: 'text-green',
    //   icon: 'icon ni ni-opt-alt-fill mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Custom Clearance',
    //   path: '/explore'
    // },
    // {
    //   id: 7,
    //   class: 'text-teal',
    //   icon: 'icon fa-solid fa-shield mb-3 mx-auto icon-circle icon-wbg icon-lg',
    //   title: 'Cargo insurance',
    //   path: '/explore'
    // },
    {
      id: 8,
      class: 'text-cyan',
      icon: 'icon ni ni-setting mb-3 mx-auto icon-circle icon-wbg icon-lg',
      title: 'Others',
      path: '/explore'
    }]
  },
  funfactData: {
    funfactList: [{
      id: 1,
      icon: require('@/images/thumb/icon-employees.svg'),
      title: 'Over 400+',
      subTitle: 'Total Members'
    }, {
      id: 2,
      icon: require('@/images/thumb/icon-users.svg'),
      title: 'Over 40+',
      subTitle: 'Total Countries'
    }, {
      id: 3,
      icon: require('@/images/thumb/icon-nfts.svg'),
      title: 'Over 1000+',
      subTitle: 'Total NFTs'
    }],
    funfactListTwo: [{
      id: 1,
      icon: require('@/images/thumb/icon-timeline.svg'),
      title: '15+',
      subTitle: 'Company'
    }, {
      id: 2,
      icon: require('@/images/thumb/icon-employees.svg'),
      title: '68+',
      subTitle: 'Members'
    }, {
      id: 3,
      icon: require('@/images/thumb/icon-users.svg'),
      title: '400+',
      subTitle: 'Mitra'
    }]
  },
  // Newsletter Data
  newsletterData: {
    title: 'Join Our Newsletter'
  },
  // termletter Data
  termletterData: {
    title: 'Are you Interesting?'
  },
  // news data
  blogData: {
    title: 'Check Out Our News',
    titleTwo: 'You might have read about us in the news',
    content: 'This is just a simple text made for this unique and awesome template, you can replace it with any text. It is a long established fact.',
    btnText: 'View all articles',
    btnLink: 'blog',
    blogList: [{
      id: 1,
      img: require('@/images/thumb/blog-img.jpg'),
      avatar: require('@/images/thumb/avatar-2.jpg'),
      title: "Enter Linda Dounia's Cyber Baat World",
      userName: 'Alex Smith',
      desc: 'Predictions for how secondary NFT sales will revolutionize industries.',
      date: '25 Apr 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 2,
      img: require('@/images/thumb/blog-img-2.jpg'),
      avatar: require('@/images/thumb/avatar-3.jpg'),
      title: 'Artist Invite: Yung Jake and Lucien Smith',
      userName: 'Kevin Martin',
      desc: 'Art world friends and confidants share their thoughts on championing',
      date: '10 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 3,
      img: require('@/images/thumb/blog-img-3.jpg'),
      avatar: require('@/images/thumb/avatar-4.jpg'),
      title: 'Visual storytelling with Alejandro Cartagena.',
      userName: 'Kamran Ahmed',
      desc: 'A photo-based interview with one of the leading photographers in NFTs.',
      date: '12 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 4,
      img: require('@/images/thumb/blog-img-4.jpg'),
      avatar: require('@/images/thumb/avatar-4.jpg'),
      title: 'Announcing Our $100m Raise, Led By A1Studio',
      userName: 'Alex Smith',
      desc: 'Predictions for how secondary NFT sales will revolutionize industries.',
      date: '12 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }],
    blogListTwo: [{
      id: 1,
      img: require('@/images/thumb/blog-img.jpg'),
      avatar: require('@/images/thumb/avatar.jpg'),
      title: "Enter Linda Dounia's Cyber Baat World",
      userName: 'Alex Smith',
      desc: 'Predictions for how secondary NFT sales will revolutionize industries.',
      date: '25 Apr 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 2,
      img: require('@/images/thumb/blog-img-2.jpg'),
      avatar: require('@/images/thumb/avatar-2.jpg'),
      title: 'Artist Invite: Yung Jake and Lucien Smith',
      userName: 'Kevin Martin',
      desc: 'Art world friends and confidants share their thoughts on championing',
      date: '10 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 3,
      img: require('@/images/thumb/blog-img-3.jpg'),
      avatar: require('@/images/thumb/avatar-3.jpg'),
      title: 'Visual storytelling with Alejandro Cartagena.',
      userName: 'Kamran Ahmed',
      desc: 'You want to succeed, surround yourself with the right kind of people.',
      date: '12 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 4,
      img: require('@/images/thumb/blog-img-4.jpg'),
      avatar: require('@/images/thumb/avatar-4.jpg'),
      title: 'Announcing Our $100m Raise, Led By A1Studio',
      userName: 'Alex Smith',
      desc: 'Predictions for how secondary NFT sales will revolutionize industries.',
      date: '12 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 5,
      img: require('@/images/thumb/blog-img-5.jpg'),
      avatar: require('@/images/thumb/avatar-5.jpg'),
      title: 'The Biggest Drop In Times Square Since New Year',
      userName: 'Kevin Martin',
      desc: 'Art world friends and confidants share their thoughts on championing',
      date: '12 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }, {
      id: 6,
      img: require('@/images/thumb/blog-img-6.jpg'),
      avatar: require('@/images/thumb/avatar-5.jpg'),
      title: 'Daz 3d, The Digitals And Ground breaking',
      userName: 'David Martin',
      desc: 'You want to succeed, surround yourself with the right kind of people.',
      date: '12 May 2022',
      numberText: '25',
      numberTextTwo: '38',
      btnLink: '/blog-detail'
    }],
    blogListThree: [{
      id: 1,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 2,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 3,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 4,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 5,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 6,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 7,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 8,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 9,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 10,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 11,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 12,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }, {
      id: 13,
      title: "DPC Surabaya",
      desc: 'Jl. Rungkut Mapan Tengah I Blok FB/14, Central Rungkut, Rungkut, Surabaya City, East Java 60293',
      nohp: '087878646567  ',
      email: 'orangutan@orangutan.com'
    }]
  },
  blogDetail: {
    img: require('@/images/thumb/blog-img.jpg'),
    content: 'Predictions for how secondary NFT sales will revolutionize creative industries. Elementum lacus, tempus aliquam turpis diam amet leo enim. Nisi enim condimentum tincidunt ornare nam adipiscing. Volutpat lacus, est hendrerit elit sed interdum. amet leo enim.',
    contentTwo: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Elementum lacus, tempus aliquam turpis diam amet leo enim. Nisi enim condimentum tincidunt ornare nam adipiscing. Volutpat lacus, est hendrerit elit sed interdum. amet leo enim.',
    quoteText: 'Design can be art. Design can be simple. That’s why it’s so complicated. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.',
    contentThree: 'A small river named Duden flows by their place and supplies it with the necessary regelialia. It is a paradisematic country, in which roasted parts of sentences fly into your mouth. There live the blind texts.',
    contentFour: 'Astro ipsum dolor sit amet, consectetur adipiscing elit. Elementum lacus, tempus aliquam turpis diam amet leo enim. Nisi enim condimentum tincidunt ornare nam adipiscing. Volutpat lacus, est hendrerit elit sed interdum. amet leo enim.',
    title: 'Submit Your Work',
    contentFive: 'Quis sunt quis do laboris eiusmod in sint dolore sit pariatur consequat commodo aliqua nulla ad dolor aliquip incididunt voluptate est aliquip adipisicing ea cupidatat nostrud incididunt aliquip dolore. Sed minim nisi duis laborum est labore nisi amet elit adipisicing proident do consectetur dolor labore sit nisi ad proident.',
    imgList: [require('@/images/thumb/blog-img.jpg'), require('@/images/thumb/blog-img-2.jpg')],
    tags: [{
      id: 1,
      title: 'Vision',
      path: ''
    }, {
      id: 2,
      title: 'Music',
      path: ''
    }],
    shares: [{
      id: 1,
      icon: 'ni-facebook-f',
      path: ''
    }, {
      id: 2,
      icon: 'ni-twitter',
      path: ''
    }]
  },
  // cta data
  ctaData: {
    title: 'Tyler Givens on making  fantasies a reality',
    content: 'I must explain to you how all this mistaken idea of the denouncing and praising pain was born and I will give you complete.',
    btnText: 'Explore EnftyMart',
    btnLink: 'explore'
  },
  ctaDataTwo: {
    title: 'Interested in joining us?',
    content: 'Hop aboard and view our open positions',
    btnText: 'See open roles',
    btnLink: 'contact'
  },
  // author data
  authorPublicData: {
    title: 'French Montana',
    userName: '@frenchmontana',
    btnText: 'Follow',
    btnLink: '',
    img: require('@/images/thumb/avatar-8.jpg')
  },
  authorSidebarData: {
    authorTabNav: [{
      id: 1,
      isActive: 'active',
      title: 'On Sale',
      slug: 'on-sale-tab',
      bsTarget: '#on-sale'
    }, {
      id: 2,
      title: 'Owned',
      slug: 'owned-tab',
      bsTarget: '#owned'
    }, {
      id: 3,
      title: 'Created',
      slug: 'created-tab',
      bsTarget: '#created'
    }],
    sidebarWidget: {
      title: 'About Me',
      content: 'I make art with the simple goal of giving you something pleasing to look at for a few seconds.',
      followingNum: 30,
      followingText: 'Following',
      followerNum: 371,
      followerText: 'Followers',
      followText: 'Followed by',
      followersAvatar: [{
        id: 1,
        avatar: require('@/images/thumb/avatar.jpg'),
        path: ''
      }, {
        id: 2,
        avatar: require('@/images/thumb/avatar-2.jpg'),
        path: ''
      }, {
        id: 3,
        avatar: require('@/images/thumb/avatar-3.jpg'),
        path: ''
      }, {
        id: 4,
        avatar: require('@/images/thumb/avatar-4.jpg'),
        path: ''
      }, {
        id: 5,
        avatar: require('@/images/thumb/avatar-5.jpg'),
        path: ''
      }],
      btnText: 'View All'
    },
    sidebarWidgetTwo: {
      title: 'Sosial Media Perusahaan',
      links: [{
        class: 'ni-globe',
        title: 'frenchmontana.com',
        path: ''
      }, {
        class: 'ni-facebook-f',
        title: 'Facebook',
        path: ''
      }, {
        class: 'ni-twitter',
        title: 'Twitter',
        path: ''
      }, {
        class: 'ni-instagram',
        title: 'Instagram',
        path: ''
      }]
    },
    sidebarWidgetThree: {
      title: 'Joined',
      date: 'Septermber 13, 2021'
    }
  },
  // author data
  authorSidebarDataTwo: {
    sidebarWidget: {
      content: 'I make art with the simple goal of giving you something pleasing to look at for a few seconds.',
      followingNum: 130,
      followingText: 'Following',
      followerNum: 271,
      followerText: 'Followers',
      followText: 'Followed by',
      followersAvatar: [{
        id: 1,
        avatar: require('@/images/thumb/avatar.jpg'),
        path: ''
      }, {
        id: 2,
        avatar: require('@/images/thumb/avatar-2.jpg'),
        path: ''
      }, {
        id: 3,
        avatar: require('@/images/thumb/avatar-3.jpg'),
        path: ''
      }, {
        id: 4,
        avatar: require('@/images/thumb/avatar-4.jpg'),
        path: ''
      }, {
        id: 5,
        avatar: require('@/images/thumb/avatar-5.jpg'),
        path: ''
      }]
    },
    sidebarWidgetTwo: {
      links: [{
        class: 'ni-globe',
        title: 'kamran.bd.com',
        path: ''
      }, {
        class: 'ni-facebook-f',
        title: 'Facebook',
        path: ''
      }, {
        class: 'ni-twitter',
        title: 'Twitter',
        path: ''
      }, {
        class: 'ni-instagram',
        title: 'Instagram',
        path: ''
      }]
    },
    sidebarWidgetThree: {
      date: 'Septermber 13, 2021'
    }
  },
  // author personal data
  authorPersonalData: {
    title: 'Kamran Ahmed',
    userName: '@kamran_76',
    btnText: 'Edit Profile',
    img: require('@/images/thumb/avatar-9.jpg'),
    coverImg: require('@/images/thumb/bread-bg-2.jpg'),
    btnLink: 'account',
    btnTextTwo: 'Profile',
    btnLinkTwo: 'profile'
  },
  // author nav
  authorNav: [// {
  //   id: 1,
  //   title: 'Profile',
  //   path: 'profile',
  //   icon: 'ni-user'
  // },
  {
    id: 2,
    title: 'Dashboard',
    path: 'homeadmin',
    icon: 'ni-dashboard'
  } // {
  //   id: 3,
  //   title: 'Account Settings',
  //   path: 'account',
  //   icon: 'ni-setting'
  // },
  // {
  //   id: 4,
  //   title: 'Help center',
  //   path: 'contact',
  //   icon: 'ni-question-alt'
  // }
  ],
  // home sidebar data
  homeSidebarData: {
    title: 'Register',
    navList: [{
      id: 1,
      class: 'active',
      icon: 'ni-home',
      title: 'Home',
      path: 'homeadmin',
      if: "checkPrivilege('home')"
    }, {
      id: 2,
      icon: 'ni-share',
      title: 'Pengaturan',
      path: 'pengaturan',
      if: "checkPrivilege('Pengaturan')"
    }, {
      id: 3,
      icon: 'ni-user',
      title: 'Register',
      path: 'offers'
    }, {
      id: 3,
      icon: 'ni-users',
      title: 'Member',
      path: 'member'
    }, {
      id: 4,
      icon: 'ni-user-list',
      title: 'Contacts',
      path: 'transactions' // if: "checkPrivilege('kontak-index')"

    }, {
      id: 5,
      icon: 'ni-calendar',
      title: 'Kegiatan',
      path: 'kegiatan',
      if: "checkPrivilege('kegiatan-index')"
    }]
  },
  // kegiatan sidebar data
  kegiatanSidebarData: {
    title: 'Register',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'homeadmin',
      if: "checkPrivilege('home')"
    }, {
      id: 2,
      icon: 'ni-share',
      title: 'Pengaturan',
      path: 'pengaturan',
      if: "checkPrivilege('pengaturan')"
    }, {
      id: 3,
      icon: 'ni-user',
      title: 'Register',
      path: 'offers'
    }, {
      id: 3,
      icon: 'ni-users',
      title: 'Member',
      path: 'member',
      if: "checkPrivilege('dpw-index')"
    }, {
      id: 4,
      icon: 'ni-user-list',
      title: 'Contacts',
      path: 'transactions',
      if: "checkPrivilege('kontak-index')"
    }, {
      id: 5,
      class: 'active',
      icon: 'ni-calendar',
      title: 'Kegiatan',
      path: 'kegiatan',
      if: "checkPrivilege('kegiatan-index')"
    }]
  },
  // offer sidebar data
  offerSidebarData: {
    title: 'Register',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: '/homeadmin',
      if: "checkPrivilege('home')"
    }, {
      id: 2,
      icon: 'ni-share',
      title: 'Pengaturan',
      path: 'pengaturan',
      if: "checkPrivilege('pengaturan')"
    }, {
      id: 3,
      class: 'active',
      icon: 'ni-user',
      title: 'Register',
      path: 'offers'
    }, {
      id: 3,
      icon: 'ni-users',
      title: 'Member',
      path: 'member',
      if: "checkPrivilege('dpw-index')"
    }, // {
    //   id: 3,
    //   icon: 'ni-file-text',
    //   title: 'Activity',
    //   path: 'activity-v2'
    // },
    // {
    //   id: 4,
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    {
      id: 4,
      icon: 'ni-user-list',
      title: 'Contacts',
      path: 'transactions'
    }, {
      id: 5,
      icon: 'ni-calendar',
      title: 'Kegiatan',
      path: 'kegiatan'
    }]
  },
  // member sidebar data
  memberSidebarData: {
    title: 'Member',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'offers'
    }, {
      id: 2,
      icon: 'ni-file-text',
      title: 'Pengaturan',
      path: 'pengaturan'
    }, {
      id: 3,
      icon: 'ni-users',
      title: 'Member',
      path: 'member'
    }, // {
    //   id: 3,
    //   icon: 'ni-user',
    //   title: 'Users',
    //   path: 'users'
    // },
    // {
    //   id: 3,
    //   icon: 'ni-file-text',
    //   title: 'Activity',
    //   path: 'activity-v2'
    // },
    // {
    //   id: 4,
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    {
      id: 5,
      icon: 'ni-user',
      title: 'Contacts',
      path: 'transactions'
    } // {
    //   id: 6,
    //   icon: 'ni-user-round',
    //   class: 'active',
    //   title: 'Members',
    //   path: 'members'
    // },
    // {
    //   id: 7,
    //   icon: 'ni-puzzle',
    //   title: 'Redeem',
    //   path: 'redeem'
    // },
    // {
    //   id: 8,
    //   icon: 'ni-download-cloud',
    //   title: 'Deposit Enfties',
    //   path: 'deposit-enfties'
    // },
    ]
  },
  pengaturanSidebarData: {
    title: 'Settings & Parameter',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'homeadmin',
      if: "checkPrivilege('home')"
    }, {
      id: 2,
      class: 'active',
      icon: 'ni-share',
      title: 'Pengaturan',
      path: 'pengaturan',
      if: "checkPrivilege('pengaturan')"
    }, {
      id: 3,
      icon: 'ni-user',
      title: 'Register',
      path: 'offers'
    }, {
      id: 3,
      icon: 'ni-users',
      title: 'Member',
      path: 'member' // if: "checkPrivilege('dpw-index')"

    }, {
      id: 4,
      icon: 'ni-user-list',
      title: 'Contacts',
      path: 'transactions',
      if: "checkPrivilege('kontak-index')"
    }, {
      id: 5,
      icon: 'ni-calendar',
      title: 'Kegiatan',
      path: 'kegiatan'
    }]
  },
  editAccSidebarData: {
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Edit Perusahaan',
      path: '/edit-company1'
    }, {
      id: 2,
      class: 'active',
      icon: 'ni-user-circle',
      title: 'Edit Akun',
      path: '/edit-acc'
    }]
  },
  editCom1SidebarData: {
    navList: [{
      id: 1,
      icon: 'ni-home',
      class: 'active',
      title: 'Edit Perusahaan',
      path: 'edit-company1'
    }, {
      id: 2,
      icon: 'ni-user-circle',
      title: 'Edit Akun',
      path: 'edit-acc'
    }]
  },
  activitySidebarData: {
    title: 'Activity',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'offers'
    }, {
      id: 2,
      icon: 'ni-file-text',
      title: 'Pengaturan',
      path: 'pengaturan'
    }, {
      id: 3,
      class: 'active',
      icon: 'ni-file-text',
      title: 'Activity',
      path: 'activity-v2'
    } // {
    //   id: 4,
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    // {
    //   id: 5,
    //   icon: 'ni-user',
    //   title: 'Contacts',
    //   path: 'transactions'
    // },
    // {
    //   id: 6,
    //   icon: 'ni-user-round',
    //   title: 'Members',
    //   path: 'members'
    // },
    // {
    //   id: 7,
    //   icon: 'ni-puzzle',
    //   title: 'Redeem',
    //   path: 'redeem'
    // },
    // {
    //   id: 8,
    //   icon: 'ni-download-cloud',
    //   title: 'Deposit Enfties',
    //   path: 'deposit-enfties'
    // },
    ]
  },
  salePurchaseSidebarData: {
    title: 'Sales / Purchase',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'offers'
    }, {
      id: 2,
      icon: 'ni-file-text',
      title: 'Activity',
      path: 'activity-v2'
    }, // {
    //   id: 3,
    //   class: 'active',
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    // {
    //   id: 4,
    //   icon: 'ni-user',
    //   title: 'Contacts',
    //   path: 'transactions'
    // },
    {
      id: 5,
      icon: 'ni-camera',
      title: 'Display',
      path: 'display'
    }, {
      id: 6,
      icon: 'ni-puzzle',
      title: 'Redeem',
      path: 'redeem'
    }, {
      id: 7,
      icon: 'ni-download-cloud',
      title: 'Deposit Enfties',
      path: 'deposit-enfties'
    }]
  },
  transactionsSidebarData: {
    title: 'Transactions',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'homeadmin',
      if: "checkPrivilege('home')"
    }, {
      id: 2,
      icon: 'ni-share',
      title: 'Pengaturan',
      path: 'pengaturan',
      if: "checkPrivilege('pengaturan')"
    }, {
      id: 3,
      icon: 'ni-user',
      title: 'Register',
      path: 'offers'
    }, {
      id: 3,
      icon: 'ni-users',
      title: 'Member',
      path: 'member',
      if: "checkPrivilege('dpw-index')"
    }, // {
    //   id: 3,
    //   icon: 'ni-file-text',
    //   title: 'Activity',
    //   path: 'activity-v2'
    // },
    // {
    //   id: 4,
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    {
      id: 4,
      class: 'active',
      icon: 'ni-user-list',
      title: 'Contacts',
      path: 'transactions'
    }, {
      id: 5,
      icon: 'ni-calendar',
      title: 'Kegiatan',
      path: 'kegiatan'
    } // {
    //   id: 6,
    //   icon: 'ni-user-round',
    //   title: 'Members',
    //   path: 'members'
    // },
    // {
    //   id: 7,
    //   icon: 'ni-puzzle',
    //   title: 'Redeem',
    //   path: 'redeem'
    // },
    // {
    //   id: 8,
    //   icon: 'ni-download-cloud',
    //   title: 'Deposit Enfties',
    //   path: 'deposit-enfties'
    // },
    ]
  },
  DPWSidebarData: {
    title: 'Transactions',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'homeadmin',
      if: "checkPrivilege('home')"
    }, {
      id: 2,
      icon: 'ni-share',
      title: 'Pengaturan',
      path: 'pengaturan',
      if: "checkPrivilege('pengaturan')"
    }, {
      id: 3,
      icon: 'ni-user',
      title: 'Register',
      path: 'offers'
    }, {
      id: 3,
      class: 'active',
      icon: 'ni-users',
      title: 'Member',
      path: 'member',
      if: "checkPrivilege('dpw-index')"
    }, // {
    //   id: 3,
    //   icon: 'ni-file-text',
    //   title: 'Activity',
    //   path: 'activity-v2'
    // },
    // {
    //   id: 4,
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    {
      id: 4,
      icon: 'ni-user-list',
      title: 'Contacts',
      path: 'transactions'
    }, {
      id: 5,
      icon: 'ni-calendar',
      title: 'Kegiatan',
      path: 'kegiatan'
    } // {
    //   id: 6,
    //   icon: 'ni-user-round',
    //   title: 'Members',
    //   path: 'members'
    // },
    // {
    //   id: 7,
    //   icon: 'ni-puzzle',
    //   title: 'Redeem',
    //   path: 'redeem'
    // },
    // {
    //   id: 8,
    //   icon: 'ni-download-cloud',
    //   title: 'Deposit Enfties',
    //   path: 'deposit-enfties'
    // },
    ]
  },
  displaySidebarData: {
    title: 'Display Enfties',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'offers'
    }, {
      id: 2,
      icon: 'ni-file-text',
      title: 'Activity',
      path: 'activity-v2'
    }, // {
    //   id: 3,
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    {
      id: 4,
      icon: 'ni-user',
      title: 'Contacts',
      path: 'transactions'
    }, {
      id: 5,
      class: 'active',
      icon: 'ni-camera',
      title: 'Display',
      path: 'display'
    }, {
      id: 6,
      icon: 'ni-puzzle',
      title: 'Redeem',
      path: 'redeem'
    }, {
      id: 7,
      icon: 'ni-download-cloud',
      title: 'Deposit Enfties',
      path: 'deposit-enfties'
    }]
  },
  redeemSidebarData: {
    title: 'Redeem Enfties',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'offers'
    }, {
      id: 2,
      icon: 'ni-file-text',
      title: 'Activity',
      path: 'activity-v2'
    }, // {
    //   id: 3,
    //   icon: 'ni-money',
    //   title: 'Sales / Purchase',
    //   path: 'purchases-sales'
    // },
    {
      id: 4,
      icon: 'ni-user',
      title: 'Contacts',
      path: 'transactions'
    }, {
      id: 5,
      icon: 'ni-camera',
      title: 'Display',
      path: 'display'
    }, {
      id: 6,
      class: 'active',
      icon: 'ni-puzzle',
      title: 'Redeem',
      path: 'redeem'
    }, {
      id: 7,
      icon: 'ni-download-cloud',
      title: 'Deposit Enfties',
      path: 'deposit-enfties'
    }]
  },
  depositSidebarData: {
    title: 'Deposit Enfties',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'offers'
    }, {
      id: 2,
      icon: 'ni-file-text',
      title: 'Activity',
      path: 'activity-v2'
    }, {
      id: 3,
      icon: 'ni-money',
      title: 'Sales / Purchase',
      path: 'purchases-sales'
    }, {
      id: 4,
      icon: 'ni-user',
      title: 'Contacts',
      path: 'transactions'
    }, {
      id: 5,
      icon: 'ni-camera',
      title: 'Display',
      path: 'display'
    }, {
      id: 6,
      icon: 'ni-puzzle',
      title: 'Redeem',
      path: 'redeem'
    }, {
      id: 7,
      class: 'active',
      icon: 'ni-download-cloud',
      title: 'Deposit Enfties',
      path: 'deposit-enfties'
    }]
  },
  // account sidebar
  accountSidebarData: {
    title: 'Account Settings',
    navList: [{
      id: 1,
      icon: 'ni-home',
      title: 'Home',
      path: 'offers'
    }, {
      id: 2,
      class: 'active',
      icon: 'ni-edit',
      title: 'Edit Profile',
      path: 'account'
    }, {
      id: 3,
      icon: 'ni-money',
      title: 'Payment Methods',
      path: 'payment-methods'
    }, {
      id: 4,
      icon: 'ni-user',
      title: 'Contacts',
      path: 'transactions'
    }, {
      id: 5,
      icon: 'ni-bell',
      title: 'Notifications',
      path: 'notifications'
    }, {
      id: 6,
      icon: 'ni-lock',
      title: 'Security',
      path: 'security'
    }]
  },
  // payment method sidebar
  paymentMethodSidebarData: {
    title: 'Payment Methods',
    navList: [{
      id: 1,
      icon: 'ni-edit',
      title: 'Edit Profile',
      path: 'account'
    }, {
      id: 2,
      class: 'active',
      icon: 'ni-money',
      title: 'Payment Methods',
      path: 'payment-methods'
    }, {
      id: 3,
      icon: 'ni-user',
      title: 'Seller Settings',
      path: 'seller-settings'
    }, {
      id: 4,
      icon: 'ni-bell',
      title: 'Notifications',
      path: 'notifications'
    }, {
      id: 5,
      icon: 'ni-lock',
      title: 'Security',
      path: 'security'
    }]
  },
  // seller setting sidebar
  sellerSettingSidebarData: {
    title: 'Seller Settings',
    navList: [{
      id: 1,
      icon: 'ni-edit',
      title: 'Edit Profile',
      path: 'account'
    }, {
      id: 2,
      icon: 'ni-money',
      title: 'Payment Methods',
      path: 'payment-methods'
    }, {
      id: 3,
      class: 'active',
      icon: 'ni-user',
      title: 'Seller Settings',
      path: 'seller-settings'
    }, {
      id: 4,
      icon: 'ni-bell',
      title: 'Notifications',
      path: 'notifications'
    }, {
      id: 5,
      icon: 'ni-lock',
      title: 'Security',
      path: 'security'
    }]
  },
  // notification sidebar
  notificationSidebarData: {
    title: 'Notifications',
    navList: [{
      id: 1,
      icon: 'ni-edit',
      title: 'Edit Profile',
      path: 'account'
    }, {
      id: 2,
      icon: 'ni-money',
      title: 'Payment Methods',
      path: 'payment-methods'
    }, {
      id: 3,
      icon: 'ni-user',
      title: 'Seller Settings',
      path: 'seller-settings'
    }, {
      id: 4,
      class: 'active',
      icon: 'ni-bell',
      title: 'Notifications',
      path: 'notifications'
    }, {
      id: 5,
      icon: 'ni-lock',
      title: 'Security',
      path: 'security'
    }]
  },
  // Security sidebar
  securitySidebarData: {
    title: 'Security',
    navList: [{
      id: 1,
      icon: 'ni-user',
      title: 'Contact',
      path: '/contact'
    }, {
      id: 2,
      icon: 'ni-edit',
      title: 'FAQs',
      path: '/faq'
    }, {
      id: 3,
      icon: 'ni-notes-alt',
      title: 'Terms and Condition',
      path: '/terms'
    }, {
      id: 4,
      icon: 'ni-lock',
      title: 'Privacy policy',
      path: '/privacy'
    }]
  },
  // terms sidebar
  termSidebarData: {
    title: 'Terms',
    navList: [{
      id: 1,
      icon: 'ni-user',
      title: 'Contact',
      path: '/contact'
    }, {
      id: 2,
      icon: 'ni-edit',
      title: 'FAQs',
      path: '/faq'
    }, {
      id: 3,
      class: 'active',
      icon: 'ni-notes-alt',
      title: 'Terms and Condition',
      path: '/terms'
    }, {
      id: 4,
      icon: 'ni-lock',
      title: 'Privacy policy',
      path: '/privacy'
    }]
  },
  // privacy sidebar
  privacySidebarData: {
    title: 'Privacy',
    navList: [{
      id: 1,
      icon: 'ni-user',
      title: 'Contact',
      path: '/contact'
    }, {
      id: 2,
      icon: 'ni-edit',
      title: 'FAQs',
      path: '/faq'
    }, {
      id: 3,
      icon: 'ni-notes-alt',
      title: 'Terms and Condition',
      path: '/terms'
    }, {
      id: 4,
      class: 'active',
      icon: 'ni-lock',
      title: 'Privacy policy',
      path: '/privacy'
    }]
  },
  // Faq sidebar
  faqSidebarData: {
    title: 'Faq',
    navList: [{
      id: 1,
      icon: 'ni-user',
      title: 'Contact',
      path: '/contact'
    }, {
      id: 2,
      class: 'active',
      icon: 'ni-edit',
      title: 'FAQs',
      path: '/faq'
    }, {
      id: 3,
      icon: 'ni-notes-alt',
      title: 'Terms and Condition',
      path: '/terms'
    }, {
      id: 4,
      icon: 'ni-lock',
      title: 'Privacy policy',
      path: '/privacy'
    }]
  },
  sellerSettingData: {
    title: 'Seller Settings',
    content: 'Current <strong>Authorized Seller </strong> Status: <strong class="text-warning">Restricted</strong>',
    contentTwo: 'You must be an authorized seller in order to sell Enfties on EnftyMart. To authorize your account for sales, please sign in to Stripe Connect.',
    contentThree: "Even if you can't become an authorized seller, you can still use the rest of EnftyMart: buy & collect Enfties, gift them to other users, or withdraw them to an external wallet.",
    btnText: 'Authorize Seller Account',
    contentFour: 'If your country does not appear, it may not be supported by Stripe Connect. Please contact <a href="contact" class="btn-link">customer support</a>'
  },
  // security data
  securityData: {
    title: 'Security',
    titleTwo: 'How Does it Work?',
    content: 'EnftyMart uses <a href="#" class="btn-link text-primary">Authy</a> as a 2fa provider. On enrollment in 2fa, we will send you a link to download authy and a code to confirm your phone number. You will then recieve 2fa requests through this app.',
    logos: [{
      id: 1,
      path: '',
      img: require('@/images/thumb/google-play.png')
    }, {
      id: 2,
      path: '',
      img: require('@/images/thumb/app-store.png')
    }],
    contentTwo: 'In cases where authy cannot be installed, sms messaging can be used for 2fa. <strong>This is a last case scenario </strong> as sms provides a <strong>less secure</strong> experience and will prevent you from enabling advanced 2fa settings within the site.',
    labelText: 'Input your phone number below to enroll',
    btnText: 'Enroll Number'
  },
  // offer data
  offerData: {
    mainTitle: 'Registration List',
    title: 'Need admin approval:',
    titleTwo: "History:",
    subTitle: 'Showing 1 to 6 of 30 entries',
    subTitleTwo: 'Showing 1 to 6 of 10 entries',
    alertText: 'Silahkan Lengkapi Data Diri Anda<router-link to="" type="button" class="btn-text"> Disini!</router-link>',
    tabNav: [{
      id: 1,
      isActive: 'active',
      title: 'Received Offers (30)',
      slug: 'offers-receive-tab',
      bsTarget: '#offers-receive'
    }, {
      id: 2,
      title: 'Registration Status History (10)',
      slug: 'offers-made-tab',
      bsTarget: '#offers-made'
    }],
    receiveItems: [{
      id: 1,
      timeText: 'Offer received 13m ago',
      title: 'PT Eternal Zen',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img.jpg'),
      name: 'RijolAdi',
      btns: [{
        id: 1,
        title: 'Accept Member',
        btnClass: 'text-success',
        path: '#'
      }, {
        id: 2,
        title: 'Cancel Member',
        btnClass: 'text-danger',
        path: '#'
      }]
    }, {
      id: 2,
      timeText: 'Offer received 17m ago',
      title: 'PT Somnium Rubram',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img-2.jpg'),
      name: 'RijolAdi',
      btns: [{
        id: 1,
        title: 'Accept Member',
        btnClass: 'text-success',
        path: '#'
      }, {
        id: 2,
        title: 'Cancel Member',
        btnClass: 'text-danger',
        path: '#'
      }]
    }, {
      id: 3,
      timeText: 'Offer received 1h ago',
      title: 'CV Dance or Die',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img-3.jpg'),
      name: 'RijolAdi',
      actionList: [{
        id: 1,
        title: 'Get Offer',
        subTitle: '$3,200.00'
      }, {
        id: 2,
        title: 'Payment Methods',
        subTitle: 'Visa ending in 9720'
      }],
      btns: [{
        id: 1,
        title: 'Accept Member',
        btnClass: 'text-success',
        path: '#'
      }, {
        id: 2,
        title: 'Cancel Member',
        btnClass: 'text-danger',
        path: '#'
      }]
    }, {
      id: 4,
      timeText: 'Offer received 1 week ago',
      title: 'CV Genesis.001',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img-4.jpg'),
      name: 'RijolAdi',
      btns: [{
        id: 1,
        title: 'Accept Member',
        btnClass: 'text-success',
        path: '#'
      }, {
        id: 2,
        title: 'Cancel Member',
        btnClass: 'text-danger',
        path: '#'
      }]
    }],
    madeItems: [{
      id: 1,
      timeText: 'Offer received 13m ago',
      title: 'Eternal Zen',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img.jpg'),
      name: 'RijolAdi',
      badgeClass: 'bg-success',
      badgeText: 'Success'
    }, {
      id: 2,
      timeText: 'Offer received 17m ago',
      title: 'Somnium Rubram',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img-2.jpg'),
      name: 'RijolAdi',
      badgeClass: 'bg-success',
      badgeText: 'Success'
    }, {
      id: 3,
      timeText: 'Offer received 1h ago',
      title: 'Dance or Die',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img-3.jpg'),
      addressText: 'Contact Address',
      addressTextTwo: '08 W 36th St, New York, NY 10001',
      name: 'RijolAdi',
      badgeClass: 'bg-danger',
      badgeText: 'Declined'
    }, {
      id: 4,
      timeText: 'Offer received 1 week ago',
      title: 'Genesis.001',
      path: '/product-details-v1-1',
      img: require('@/images/thumb/small-img-4.jpg'),
      addressText: 'Contact Address',
      addressTextTwo: '08 W 36th St, New York, NY 10001',
      name: 'RijolAdi',
      badgeClass: 'bg-danger',
      badgeText: 'Declined'
    }]
  },
  // user activity data
  userActivityTabNav: [{
    id: 1,
    isActive: 'active',
    title: 'All',
    slug: 'all-tab',
    bsTarget: '#all'
  }, {
    id: 2,
    title: 'Following',
    slug: 'following-tab',
    bsTarget: '#following'
  }, {
    id: 3,
    title: 'Bidding',
    slug: 'bidding-tab',
    bsTarget: '#bidding'
  }, {
    id: 4,
    title: 'Sales',
    slug: 'sales-tab',
    bsTarget: '#sales'
  }],
  userActivityItems: {
    mainTitle: 'Activity',
    allData: [{
      id: 1,
      title: 'Monica Lucas',
      subTitle: 'Started following',
      author: 'Gayle Hicks',
      path: '/author',
      img: require('@/images/thumb/avatar.jpg'),
      timeText: '10/07/2021, 12:40'
    }, {
      id: 2,
      title: 'Deep Sea Phantasy',
      subTitle: 'Bid placed by',
      meta: 'for',
      price: '0.001',
      author: 'Stacy Long',
      path: '/author',
      img: require('@/images/thumb/avatar-2.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 3,
      title: 'Cute Astronout',
      subTitle: 'Purchased by',
      meta: 'for',
      price: '0.145',
      author: 'Nicholas Daniels',
      path: '/author',
      img: require('@/images/thumb/avatar-3.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 4,
      title: 'Mamie Barnett',
      subTitle: 'Started following',
      author: 'Nicholas Daniels',
      path: '/author',
      img: require('@/images/thumb/avatar-4.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 5,
      title: 'Alex Smith',
      subTitle: 'Started following',
      author: 'Kevin Martin',
      path: '/author',
      img: require('@/images/thumb/avatar-5.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 6,
      title: 'Jhonathan Doe',
      subTitle: 'Bid placed by',
      author: 'Evan You',
      meta: 'for',
      price: '0.013',
      path: '/author',
      img: require('@/images/thumb/avatar-6.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 7,
      title: 'Jhon Abraham',
      subTitle: 'Purchased by',
      meta: 'for',
      price: '0.212',
      author: 'David Hardson',
      path: '/author',
      img: require('@/images/thumb/avatar-7.jpg'),
      timeText: '12/05/2021, 12:30'
    }],
    followingData: [{
      id: 1,
      title: 'Monica Lucas',
      author: 'Gayle Hicks',
      path: '/author',
      img: require('@/images/thumb/avatar-8.jpg'),
      timeText: '10/07/2021, 12:40'
    }, {
      id: 2,
      title: 'Mamie Barnett',
      author: 'Nicholas Daniels',
      path: '/author',
      img: require('@/images/thumb/avatar-9.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 3,
      title: 'Alex Smith',
      author: 'Kevin Martin',
      path: '/author',
      img: require('@/images/thumb/avatar-10.jpg'),
      timeText: '12/05/2021, 11:34'
    }],
    biddingData: [{
      id: 1,
      title: 'Deep Sea Phantasy',
      author: 'Stacy Long',
      meta: 'for',
      price: '0.212',
      path: '/author',
      img: require('@/images/thumb/avatar-2.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 2,
      title: 'Jhonathan Doe',
      author: 'Evan You',
      meta: 'for',
      price: '0.212',
      path: '/author',
      img: require('@/images/thumb/avatar-6.jpg'),
      timeText: '12/05/2021, 11:34'
    }],
    salesData: [{
      id: 1,
      title: 'Cute Astronout',
      author: 'Nicholas Daniels',
      meta: 'for',
      price: '0.212',
      path: '/author',
      img: require('@/images/thumb/avatar-3.jpg'),
      timeText: '12/05/2021, 11:34'
    }, {
      id: 2,
      title: 'Jhon Abraham',
      author: 'David Hardson',
      meta: 'for',
      price: '0.212',
      path: '/author',
      img: require('@/images/thumb/avatar-7.jpg'),
      timeText: '12/05/2021, 12:30'
    }]
  },
  // purchases and sale tab nav
  purchaseAndSaleTabNav: [{
    id: 1,
    isActive: 'active',
    title: 'Purchases',
    slug: 'purchases-tab',
    bsTarget: '#purchases'
  }, {
    id: 2,
    title: 'Sales',
    slug: 'sales-tab',
    bsTarget: '#sales'
  }],
  // purchases and sale tab nav
  purchaseAndSaleTabNavMobile: [{
    id: 1,
    isActive: 'active',
    title: 'Purchases',
    slug: 'purchases-tab-mobile',
    bsTarget: '#purchases-mobile'
  }, {
    id: 2,
    title: 'Sales',
    slug: 'sales-tab-mobile',
    bsTarget: '#sales-mobile'
  }],
  // purchases and sale data
  purchaseAndSaleData: {
    mainTitle: 'Sales & Purchase',
    purchaseData: [{
      id: 1,
      title: 'Serpent #76/140',
      author: 'Alex',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 2,
      title: ' Afterburn',
      author: 'Kamran',
      authorLink: '/author',
      price: '20.00',
      dateText: '4d ago'
    }, {
      id: 3,
      title: ' Dance or Die',
      author: 'Jhon',
      authorLink: '/author',
      price: '50.00',
      dateText: '3d ago'
    }, {
      id: 4,
      title: 'Green Parrot Island',
      author: 'Alex',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 5,
      title: 'Lavish',
      author: 'Alex',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 6,
      title: 'Karma Chameleon',
      author: 'Alex',
      authorLink: '/author',
      price: '25.00',
      dateText: '4d ago'
    }, {
      id: 7,
      title: 'Le Anime',
      author: 'Alex',
      authorLink: '/author',
      price: '20.00',
      dateText: '4d ago'
    }, {
      id: 8,
      title: 'Lady Robot #62',
      author: 'Alex',
      authorLink: '/author',
      price: '250.00',
      dateText: '3d ago'
    }, {
      id: 9,
      title: 'Creature #8477',
      author: 'Alex',
      authorLink: '/author',
      price: '250.00',
      dateText: '2d ago'
    }, {
      id: 10,
      title: 'Gold #422/477',
      author: 'Alex',
      authorLink: '/author',
      price: '12.00',
      dateText: '1d ago'
    }],
    salesData: [{
      id: 1,
      title: 'Lady Robot #62',
      author: 'David',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 2,
      title: 'Creature #8477',
      author: 'Robi',
      authorLink: '/author',
      price: '30.00',
      dateText: '4d ago'
    }, {
      id: 3,
      title: 'Gold #422/477',
      author: 'Jared Liner',
      authorLink: '/author',
      price: '50.00',
      dateText: '4d ago'
    }, {
      id: 4,
      title: 'Serpent #76/140 ',
      author: 'Antonio',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 5,
      title: 'Afterburn',
      author: 'Jhon',
      authorLink: '/author',
      price: '30.00',
      dateText: '4d ago'
    }, {
      id: 6,
      title: 'Dance or Die',
      author: 'Kevin Martin',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 7,
      title: 'Green Parrot Island',
      author: 'Alex',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 8,
      title: 'Lavish',
      author: 'Alex',
      authorLink: '/author',
      price: '250.00',
      dateText: '4d ago'
    }, {
      id: 9,
      title: 'Karma Chameleon',
      author: 'Kamran',
      authorLink: '/author',
      price: '25.00',
      dateText: '4d ago'
    }, {
      id: 10,
      title: 'Le Anime',
      author: 'Alex',
      authorLink: '/author',
      price: '22.00',
      dateText: '4d ago'
    }]
  },
  // transactions data
  // membersData: {
  //   mainTitle: 'Member',
  //   membersTableHead: [
  //     '#',
  //     'Nama',
  //     'Alamat',
  //     'No Hp',
  //     'Email',
  //     'Perusahaan',
  //     'Status',
  //     ''
  //   ],
  //   membersTableBody: [
  //     {
  //       id: 4947,
  //       title: 'Patternlicious',
  //       timeText: '10-05-2019',
  //       price: '$599.00',
  //       img: require('@/images/brand/visa.png'),
  //       email: 'sadasdj@jfahfjkah.com',
  //       perusahaan: 'bojong',
  //       badgeText: 'Member',
  //       badgeClass: 'bg-success'
  //     },
  //     {
  //       id: 4904,
  //       title: 'Alex Smith',
  //       timeText: '10-05-2019',
  //       price: '$599.00',
  //       img: require('@/images/brand/paypal.png'),
  //       email: 'ddd',
  //       perusahaan: 'ss',
  //       badgeText: 'Member',
  //       badgeClass: 'bg-success'
  //     },
  //     {
  //       id: 4840,
  //       title: 'Alex Smith',
  //       timeText: '10-05-2019',
  //       price: '$99.00',
  //       img: require('@/images/brand/a-express.png'),
  //       email: 'ff',
  //       perusahaan: 'aa',
  //       badgeText: 'Declined',
  //       badgeClass: 'bg-danger'
  //     },
  //     {
  //       id: 4740,
  //       title: 'Patternlicious',
  //       timeText: '10-05-2019',
  //       price: '$599.00',
  //       img: require('@/images/brand/visa.png'),
  //       email: 'ffas',
  //       perusahaan: 'sdsad',
  //       badgeText: 'Member',
  //       badgeClass: 'bg-success'
  //     },
  //     {
  //       id: 4444,
  //       title: 'Patternlicious',
  //       timeText: '10-05-2019',
  //       price: '$599.00',
  //       img: require('@/images/brand/paypal.png'),
  //       email: 'fasf',
  //       perusahaan: 'afsaf',
  //       badgeText: 'Member',
  //       badgeClass: 'bg-success'
  //     },
  //     {
  //       id: 4144,
  //       title: 'Patternlicious',
  //       timeText: '10-05-2019',
  //       price: '$599.00',
  //       img: require('@/images/brand/a-express.png'),
  //       email: 'sfa',
  //       perusahaan: 'fsaf',
  //       badgeText: 'Declined',
  //       badgeClass: 'bg-danger'
  //     }
  //   ],
  // },
  // transactions data
  membersData: {
    mainTitle: 'Member',
    membersTableHead: ['#', 'Name', 'Email', 'Username', 'Nama Perusahaan', 'Phone Number', 'Company Industri', 'Wilayah', 'Kota', 'Bentuk Badan Usaha', 'Alasan Bergabung', 'Status'],
    membersTableBody: [{
      id: 4947,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/visa.png'),
      email: 'sadasdj@jfahfjkah.com',
      perusahaan: 'bojong',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4904,
      title: 'Alex Smith',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/paypal.png'),
      email: 'ddd',
      perusahaan: 'ss',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4840,
      title: 'Alex Smith',
      timeText: '10-05-2019',
      price: '$99.00',
      img: require('@/images/brand/a-express.png'),
      email: 'ff',
      perusahaan: 'aa',
      badgeText: 'Declined',
      badgeClass: 'bg-danger'
    }, {
      id: 4740,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/visa.png'),
      email: 'ffas',
      perusahaan: 'sdsad',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4444,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/paypal.png'),
      email: 'fasf',
      perusahaan: 'afsaf',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4144,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/a-express.png'),
      email: 'sfa',
      perusahaan: 'fsaf',
      badgeText: 'Declined',
      badgeClass: 'bg-danger'
    }]
  },
  // transactions data
  tipemitraData: {
    mainTitle: 'Tipe Mitra',
    tipemitraTableHead: ['Nama', 'Action' // 'No Hp',
    // 'Email',
    // 'Perusahaan',
    // 'Status',
    // ''
    ],
    tipemitraTableBody: [{
      id: 4947,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/visa.png'),
      email: 'sadasdj@jfahfjkah.com',
      perusahaan: 'bojong',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4904,
      title: 'Alex Smith',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/paypal.png'),
      email: 'ddd',
      perusahaan: 'ss',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4840,
      title: 'Alex Smith',
      timeText: '10-05-2019',
      price: '$99.00',
      img: require('@/images/brand/a-express.png'),
      email: 'ff',
      perusahaan: 'aa',
      badgeText: 'Declined',
      badgeClass: 'bg-danger'
    }, {
      id: 4740,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/visa.png'),
      email: 'ffas',
      perusahaan: 'sdsad',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4444,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/paypal.png'),
      email: 'fasf',
      perusahaan: 'afsaf',
      badgeText: 'Member',
      badgeClass: 'bg-success'
    }, {
      id: 4144,
      title: 'Patternlicious',
      timeText: '10-05-2019',
      price: '$599.00',
      img: require('@/images/brand/a-express.png'),
      email: 'sfa',
      perusahaan: 'fsaf',
      badgeText: 'Declined',
      badgeClass: 'bg-danger'
    }]
  },
  // offer register data
  registersData: {
    mainTitle: 'Registers',
    registersTableHead: ['#', 'Name', // 'Email',
    // 'Username',
    'Nama Perusahaan', // 'Phone Number',
    // 'Company Industri',
    'Wilayah', // 'Kota',
    // 'Bentuk Badan Usaha',
    // 'Alasan Bergabung',
    'Status', 'Pesan', 'Action']
  },
  // offer register data
  LogData: {
    mainTitle: 'Log Register',
    LogTableHead: ['#', 'Name', 'Email', // 'Username',
    'Nama Perusahaan', 'Phone Number', 'Register Date' // 'Company Industri',
    // 'Wilayah',
    // 'Kota',
    // 'Bentuk Badan Usaha',
    // 'Alasan Bergabung',
    // 'Status',
    // 'Pesan',
    // 'Action',
    ]
  },
  // User Management data
  userMData: {
    mainTitle: 'userM',
    userMTableHead: ['#', 'Name', 'Email', 'Nomor Handphone', // 'Status',
    'Roles', 'Action']
  },
  // provinsi data
  provinsisData: {
    mainTitle: 'Provinsis',
    provinsisTableHead: ['ID', 'Provinsi', 'Action']
  },
  // transaksi data
  transaksiData: {
    mainTitle: 'Transaksi',
    transaksiTableHead: ['Tanggal', 'Kas', 'Akun', // 'Jenis Transaksi',
    'Keterangan', // 'Anggota',
    'Jumlah', 'Tipe', 'Action']
  },
  // transaksi data
  waterMelonData: {
    mainTitle: 'Transaksi',
    waterMelonTableHead: ['Tanggal', 'Keterangan', 'Jumlah']
  },
  // transaksi data
  fireMelonData: {
    mainTitle: 'Iuran',
    fireMelonTableHead: ['Bulan', 'Jumlah', 'Status', 'Action']
  },
  // transaksi data
  iuranData: {
    mainTitle: 'Iuran',
    iuranTableHead: ['Nama', 'Jumlah', 'Status']
  },
  // laporan data
  laporanData: {
    mainTitle: 'Transaksi',
    laporanTableHead: ['Tanggal', 'Kas', // 'Jenis Transaksi',
    'Keterangan', // 'Anggota',
    'Debit', 'Kredit', 'Saldo Akhir']
  },
  // rekap data
  rekapData: {
    mainTitle: 'Rekap Bulanan',
    rekapTableHead: ['Bulan', 'Pemasukan', 'Pengeluaran']
  },
  // mitra data
  mitraData: {
    mainTitle: 'Kemitraan',
    mitraTableHead: ['Nama', 'Alamat', 'No HP', 'Email', 'Perusahaan', 'Status', 'Action']
  },
  // khas data
  khasData: {
    mainTitle: 'Master Kas',
    khasTableHead: ['Kode', 'Nama', 'Saldo Awal', 'Saldo Akhir', 'Keterangan', 'Tanggal Update', 'Update Oleh', 'Action']
  },
  // pengumuman data
  pengumumansData: {
    mainTitle: 'pengumuman',
    pengumumansTableHead: ['Wilayah', 'Tanggal', 'Judul', 'Status', 'Action']
  },
  // Bank data
  BanksData: {
    mainTitle: 'Banks',
    BanksTableHead: ['Bank', 'Action']
  },
  // industry data
  industrysData: {
    mainTitle: 'Industri',
    industrysTableHead: ['#', 'Name', 'Action']
  },
  // DPW data
  DPWData: {
    mainTitle: 'DPW',
    DPWTableHead: ['#', 'Kode', 'Nama', 'Alamat Kantor', 'Email', 'Nomor', 'Action']
  },
  // DPW data
  UserMemberData: {
    mainTitle: 'Member',
    UserMemberTableHead: ['#', 'Nama', 'Wilayah', 'Telephone', 'Email', 'Action']
  },
  // data
  KategoriAkunData: {
    mainTitle: 'Member',
    KategoriAkunTableHead: ['Kode', 'Nama Kategori', 'Action']
  },
  // Group data
  groupData: {
    mainTitle: 'Group',
    groupTableHead: ['Nama Group', 'Action']
  },
  // Group data
  privilegeData: {
    mainTitle: 'Privilege',
    privilegeTableHead: ['Nama Privilege', 'Action']
  },
  // city data
  cityData: {
    mainTitle: 'City',
    cityTableHead: ['ID', 'Nama', 'City', 'Action']
  },
  // kegiatan data
  kegiatanData: {
    mainTitle: 'kegiatan',
    kegiatanTableHead: ['#', 'Nama Kegiatan', 'Sifat Kegiatan', 'Lokasi Kegiatan', 'Tanggal Rencana', 'Tanggal Realisasi', 'Keterangan', 'Action']
  },
  // contact data
  contactsData: {
    mainTitle: 'Contact',
    contactsTableHead: ['ID', 'Nama', 'Alamat', 'Email', 'Nomor', 'Status', 'Action']
  },
  // users data
  usersData: {
    mainTitle: 'Users',
    usersTableHead: ['ID', 'Name', 'Email', 'Username', 'Nama Perusahaan', 'Nomor Handphone', 'Company Industri', 'Wilayah', 'Provinsi', 'Kota', 'Bentuk Badan Usaha', 'Alasan Bergabung']
  },
  // pengurus data
  pengurusData: {
    mainTitle: 'Pengurus',
    pengurusTableHead: ['#', 'Jabatan', 'Member', 'Username', 'Status', 'Action']
  },
  // wilayah data
  wilayahData: {
    mainTitle: 'Wilayah',
    wilayahTableHead: ['ID', 'Name', 'Email', 'Kota', 'Alamat', 'Nomor', 'Action']
  },
  jabatanData: {
    mainTitle: 'Jabatan',
    jabatanTableHead: ['ID', 'Name', 'Level', 'Action']
  },
  // transactions data
  transactionsData: {
    mainTitle: 'Contact',
    transactionsTableHead: ['#', 'Nama', 'Alamat', 'No Hp', 'Email', 'Perusahaan', 'Status', '']
  },
  // edit profile data
  editProfileData: {
    title: 'Account Settings',
    editProfileTabNav: [{
      id: 1,
      isActive: 'active',
      title: 'Edit Info',
      slug: 'account-information-tab',
      bsTarget: '#account-information'
    }, {
      id: 2,
      title: 'Password',
      slug: 'change-password-tab',
      bsTarget: '#change-password'
    }, {
      id: 3,
      title: 'Verify Profile',
      slug: 'validate-profile-tab',
      bsTarget: '#validate-profile'
    }],
    // edit profile tab mobile
    editProfileTabNavMobile: [{
      id: 1,
      isActive: 'active',
      title: 'Account Information',
      slug: 'account-information-tab-mobile',
      bsTarget: '#account-information-mobile'
    }, {
      id: 2,
      title: 'Change Password',
      slug: 'change-password-tab-mobile',
      bsTarget: '#change-password-mobile'
    }, {
      id: 3,
      title: 'Validate Profile',
      slug: 'validate-profile-tab-mobile',
      bsTarget: '#validate-profile-mobile'
    }]
  },
  // pengaturan profile data
  pengaturanProfileData: {
    title: 'Settings & Parameter',
    pengaturanProfileTabNav: [{
      id: 1,
      isActive: 'active',
      title: 'Pengaturan Umum',
      slug: 'pengaturan-umum-tab',
      bsTarget: '#pengaturan-umum'
    }, {
      id: 2,
      title: 'User Management',
      slug: 'change-password-tab',
      bsTarget: '#change-password'
    }] //  // pengaturan profile tab mobile
    //   pengaturanProfileTabNavMobile: [
    //    {
    //      id: 1,
    //      isActive: 'active',
    //      title: 'Pengaturan Umum',
    //      slug: 'account-information-tab-mobile',
    //      bsTarget: '#account-information-mobile'
    //    },
    //    {
    //      id: 2,
    //      title: 'Change Password',
    //      slug: 'change-password-tab-mobile',
    //      bsTarget: '#change-password-mobile'
    //    },
    //  ],

  },
  // pengaturan profile data
  // userManaData: {
  //   userManaTabNav: [
  //    {
  //      id: 1,
  //      isActive: 'active',
  //      title: 'Add User',
  //      slug: 'user-tab',
  //      bsTarget: '#user-tab'
  //    },
  //    {
  //      id: 2,
  //      title: 'Group',
  //      slug: 'group-tab',
  //      bsTarget: '#group-tab'
  //    },
  //  ],
  // pengaturan profile tab mobile
  //   userManaTabNavMobile: [
  //    {
  //      id: 1,
  //      isActive: 'active',
  //      title: 'Add User',
  //      slug: 'account-information-tab-mobile',
  //      bsTarget: '#account-information-mobile'
  //    },
  //    {
  //      id: 2,
  //      title: 'Change Password',
  //      slug: 'change-password-tab-mobile',
  //      bsTarget: '#change-password-mobile'
  //    },
  //  ],
  // },
  // payment method data
  paymentMethodData: {
    title: 'Payment Methods',
    paymentMethodTabNav: [{
      id: 1,
      isActive: 'active',
      title: 'Home',
      slug: 'balances-tab',
      bsTarget: '#balances'
    }, {
      id: 2,
      title: 'Review',
      slug: 'credit-cards-tab',
      bsTarget: '#credit-cards'
    }],
    // edit profile tab mobile
    paymentMethodTabNavMobile: [{
      id: 1,
      isActive: 'active',
      title: 'Home',
      slug: 'balances-tab-mobile',
      bsTarget: '#balances-mobile'
    }, {
      id: 2,
      title: 'Review',
      slug: 'credit-cards-tab-mobile',
      bsTarget: '#credit-cards-mobile'
    }, {
      id: 3,
      title: 'Prepaid ETH',
      slug: 'prepaid-eth-tab-mobile',
      bsTarget: '#prepaid-eth-mobile'
    }]
  },
  // notification data
  notificationData: {
    title: 'Notifications',
    notificationTabNav: [{
      id: 1,
      isActive: 'active',
      title: 'Email Alerts',
      slug: 'email-alerts-tab',
      bsTarget: '#email-alerts'
    }, {
      id: 2,
      title: 'Price Alerts',
      slug: 'price-alerts-tab',
      bsTarget: '#price-alerts'
    }],
    // notification tab mobile
    notificationTabNavMobile: [{
      id: 1,
      isActive: 'active',
      title: 'Email Alerts',
      slug: 'email-alerts-tab-mobile',
      bsTarget: '#email-alerts-mobile'
    }, {
      id: 2,
      title: 'Price Alerts',
      slug: 'price-alerts-tab-mobile',
      bsTarget: '#price-alerts-mobile'
    }]
  },
  // credit card data
  creditCardList: [{
    id: 1,
    title: 'Reza from PT. BUSUR PANAH',
    timeText: '08/11/2022',
    img: require('@/images/thumb/visa.png'),
    titleTwo: 'Bintang ++ ',
    addressText: 'isi pesan yang aman aman saja klo mau makan ya makan klo ngantuk ya tidur awkoawoawko'
  }, {
    id: 2,
    title: 'Kijang from PT. AMBURADULL',
    timeText: '02/9/2022',
    img: require('@/images/thumb/master-card.png'),
    titleTwo: 'Bintang ++ ',
    addressText: 'isi pesan yang aman aman saja klo mau makan ya makan klo ngantuk ya tidur awkoawoawko'
  }, {
    id: 3,
    title: 'Kijang from PT. AMBURADULL',
    timeText: '02/9/2022',
    img: require('@/images/thumb/master-card.png'),
    titleTwo: 'Bintang ++ ',
    addressText: 'isi pesan yang aman aman saja klo mau makan ya makan klo ngantuk ya tidur awkoawoawko'
  }],
  // credit card data
  creditCardData: {
    alertText: 'Using a Capital One card may lead to issues completing purchases. Please consider using a different card until further notice.',
    title: 'Your Saved Credit Cards:',
    content: "You created new card. Transactions status i 'Authorized'",
    btnText: 'Add New Card'
  },
  // create data
  createData: {
    btnText: 'Go Back',
    path: '/',
    title: 'Create collectible',
    content: 'Choose <strong>“Single”</strong> if you want your collectible to be one of a kind or <strong>“Multiple”</strong> if you want to sell one collectible multiple times',
    cards: [{
      id: 1,
      title: 'Single',
      img: require('@/images/thumb/single-mobile.png'),
      path: 'create-single'
    }, {
      id: 1,
      title: 'Mutiple',
      img: require('@/images/thumb/multiple-mobile.png'),
      path: 'create-multiple'
    }],
    contentTwo: 'We do not own your private keys and cannot access your funds without your confirmation'
  },
  // create singledata
  createSingleData: {
    btnText: 'Manage collectible type',
    path: '/create',
    title: 'Create single collectible'
  },
  // multiple data
  createMultipleData: {
    btnText: 'Manage collectible type',
    path: '/create',
    title: 'Create multiple collectible'
  },
  // select method tab nav
  selectMethodTabNav: [{
    id: 1,
    isActive: 'active',
    title: 'Fixed Price',
    slug: 'fixed-price-tab',
    bsTarget: '#fixed-price',
    icon: 'ni-tags'
  }, {
    id: 2,
    title: 'Timed Auction',
    slug: 'timed-auction-tab',
    bsTarget: '#timed-auction',
    icon: 'ni-clock'
  }, {
    id: 3,
    title: 'Open for bids',
    slug: 'open-for-bids-tab',
    bsTarget: '#open-for-bids',
    icon: 'ni-file'
  }],
  // select method tab nav
  selectMethodTabNavTwo: [{
    id: 1,
    isActive: 'active',
    title: 'Fixed Price',
    slug: 'fixed-price-tab',
    bsTarget: '#fixed-price',
    icon: 'ni-tags'
  }, {
    id: 2,
    title: 'Open for bids',
    slug: 'open-for-bids-tab',
    bsTarget: '#open-for-bids',
    icon: 'ni-file'
  }],
  // previe item data
  previewItemData: {
    img: require('@/images/thumb/nft3.jpg'),
    title: 'One Tribe Black Edition',
    byText: 'By',
    authorText: 'ZeniconStudio',
    authorLink: '/author',
    priceText: 'Price',
    givenPrice: '$14.20',
    priceTextTwo: 'Current bid',
    currentPrice: '0.000 ETH',
    btnText: 'Place Bid',
    path: '/product-details-v1-1'
  },
  // prepaid-eth data
  prepaidData: {
    title: 'Pre-Paid ETH Balance',
    content: 'Balances can be withdrawn in ETH at anytime',
    contentTwo: 'To increase your balance, send ETH to your deposit address below. ETH will be valued at USD market value at time of purchase. Gas fees will be subtracted from withdrawal amounts.',
    balances: [{
      id: 1,
      title: 'Balance',
      price: '2 ETH',
      priceTwo: '$330.00 USD'
    }, {
      id: 2,
      title: 'Holds',
      price: '2 ETH',
      priceTwo: '$330.00 USD'
    }]
  },
  // balance data
  balanceData: {
    title: 'Balance:',
    price: '$330.00',
    titleTwo: 'Holds:',
    priceTwo: '$330.00',
    content: 'There is a $5,000 weekly cash out limit with a bank account.',
    btnText: 'Connect A Bank Account',
    btns: [{
      title: 'Cash out to Bank',
      btnClass: 'btn-outline-primary',
      path: ''
    }, {
      title: 'View Cashout history',
      btnClass: 'btn-light',
      path: ''
    }]
  },
  // disply enfty data
  displayEnftyData: {
    mainTitle: 'Display Enfties',
    content: 'New to displays? Learn more <a href="#">here</a>',
    titleTwo: 'Connect New Display',
    btnText: 'Add Display',
    titleThree: 'Your Displays',
    btnTextTwo: 'Display external Enfties',
    contentTwo: 'Please allow for up to 40 seconds for your changes to be reflected on your display screen'
  },
  // redeem enfty data
  redeemEnftyData: {
    mainTitle: 'Redeem Enfties',
    content: 'Redemptions reward the top collectors of a particular artist by gifting them a nifty if a collector has a certain number of pieces from a particular collection on their account.',
    contentTwo: 'To see if you are eligible, just select a redemption below!',
    titleTwo: 'Redeem Enfty',
    contentThree: 'Select the project you would like to redeem',
    contentFour: 'All 5 available Enfties for redemption have been claimed'
  },
  // deposit data
  depositData: {
    mainTitle: 'Deposit Enfties',
    content: 'Only EnftyMart collection Enfties can be deposited. To check if your Enfty is eligible for deposit, click <a href="#" data-bs-toggle="modal" data-bs-target="#depositNiftyModal" class="btn-link">Here</a>',
    contentTwo: 'Metamask browser extension is required. Visit <a href="https://metamask.io/">metamask.io</a> to learn more.',
    btnText: 'Connect a new wallet',
    btnLink: 'wallet'
  },
  depositNiftyModal: {
    title: 'Deposit Enfty',
    content: 'Only Enfties registered in Enfty Gateway collections can be deposited. Check if your Enfty is compatible below:',
    img: require('@/images/thumb/qrcode.png'),
    contentTwo: 'Scan QR code or send your nifty to the address above',
    contentThree: 'Do not send cryptocurrency to this address',
    btnText: 'Check'
  },
  deleteModal: {
    title: 'Your item will be deleted permanently!',
    titleTwo: 'Your card will be deleted permanently!',
    content: 'Are you sure you want to delete item?',
    img: require('@/images/thumb/exclamation-circle-solid.svg'),
    btnText: 'Cancel',
    btnTextTwo: 'Ok Delete'
  },
  // about hero data
  aboutData: {
    title: 'PPLI',
    content: "At EnftyMart, we're excited about a brand new type of digital good called a non-fungible token, or NFT. NFTs have exciting new properties: they’re unique, provably scarce, tradeable, and usable across multiple applications. Just like physical goods, you can do whatever you want with them! You could throw them in the trash, gift them to a friend a",
    contentTwo: "A core part of our vision is that open protocols like Ethereum and interoperable standards like ERC-721 and ERC-1155 will enable vibrant new economies. We're building tools that allow consumers to trade their assets freely",
    contentThree: 'We’re proud to be the first and largest marketplace for NFTs.',
    img: require('@/images/thumb/nft-img-2.png')
  },
  aboutDataTwo: {
    title: 'About the EnftyMart',
    content: 'EnftyMart was founded with a very simple mission - to make Enfties accessible to everyone',
    contentTwo: 'In 2017 the world witnessed the birth of CryptoKitties. For the first time, the world experienced a decentralized application built on blockchains but targetted towards a mainstream audience.',
    contentThree: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Minus, quasi consectetur. Et delectus minus saepe cumque qui harum! Aperiam, dolorem itaque!',
    contentFour: 'Today, <strong>we’re proud to remain the largest general marketplace for user-owned digital items</strong>, supporting multiple blockchains, with the broadest set of categories',
    img: require('@/images/thumb/about-img.jpg')
  },
  brandData: {
    title: 'Backed by top firms & industry leaders',
    content: 'Who are helping us pave the way towards a brand new digital economy',
    brandList: [{
      id: 1,
      img: require('@/images/brand/brand.png'),
      itemToShow: 'show'
    }, {
      id: 2,
      img: require('@/images/brand/brand-2.png'),
      itemToShow: 'show'
    }, {
      id: 3,
      img: require('@/images/brand/brand-3.png'),
      itemToShow: 'show'
    }, {
      id: 4,
      img: require('@/images/brand/brand-2.png'),
      itemToShow: 'show'
    }, {
      id: 5,
      img: require('@/images/brand/brand-3.png')
    }, {
      id: 6,
      img: require('@/images/brand/brand-4.png')
    }, {
      id: 7,
      img: require('@/images/brand/brand.png')
    }, {
      id: 8,
      img: require('@/images/brand/brand-2.png')
    }, {
      id: 9,
      img: require('@/images/brand/brand-3.png')
    }, {
      id: 10,
      img: require('@/images/brand/brand-4.png')
    }, {
      id: 11,
      img: require('@/images/brand/brand.png')
    }, {
      id: 12,
      img: require('@/images/brand/brand.png')
    }]
  },
  teamData: {
    title: 'With some of the most forward-thinking angels',
    content: 'Who are just as passionate about this space as we are',
    teamList: [{
      id: 1,
      img: require('@/images/client/a.jpg'),
      title: 'Jessica brown',
      meta: 'Co-founder of Scalar'
    }, {
      id: 2,
      img: require('@/images/client/b.jpg'),
      title: 'Tim Ferris',
      meta: 'Entrepreneur'
    }, {
      id: 3,
      img: require('@/images/client/c.jpg'),
      title: 'Belinda Johnson',
      meta: 'Attorney of Airbnb'
    }, {
      id: 4,
      img: require('@/images/client/d.jpg'),
      title: 'Justin Kan',
      meta: 'Co-founder of Twitch'
    }, {
      id: 5,
      img: require('@/images/client/e.jpg'),
      title: 'Alexis Ohanian',
      meta: 'Co-founder of Reddit'
    }, {
      id: 6,
      img: require('@/images/client/f.jpg'),
      title: 'Balaji Srinivisan',
      meta: 'Entrepreneur'
    }]
  },
  // ranking data
  rankingData: {
    tableHead: ['Collection', 'Volume', '24h %', '7d %', 'Floor Price', 'Owners', 'Assets'],
    tableBody: [{
      id: 1,
      path: '',
      img: require('@/images/thumb/avatar.jpg'),
      authorName: 'Patternlicious',
      numText: '6,593.91',
      numTextTwo: '33.78%',
      numTextThree: '22.32%',
      numTextFour: '4.5',
      numTextFive: '6.5k',
      numTextSix: '53.3k'
    }, {
      id: 2,
      path: '',
      img: require('@/images/thumb/avatar-2.jpg'),
      authorName: 'Cartoonism',
      numText: '6,593.91',
      numTextTwo: '33.78%',
      numTextThree: '22.32%',
      numTextFour: '4.5',
      numTextFive: '6.5k',
      numTextSix: '53.3k'
    }, {
      id: 3,
      path: '',
      img: require('@/images/thumb/avatar-3.jpg'),
      authorName: 'Virtuland',
      numText: '6,593.91',
      numTextTwo: '33.78%',
      numTextThree: '22.32%',
      numTextFour: '4.5',
      numTextFive: '6.5k',
      numTextSix: '53.3k'
    }, {
      id: 4,
      path: '',
      img: require('@/images/thumb/avatar-3.jpg'),
      authorName: 'RockToonz',
      numText: '6,593.91',
      numTextTwo: '33.78%',
      numTextThree: '22.32%',
      numTextFour: '4.5',
      numTextFive: '6.5k',
      numTextSix: '53.3k'
    }, {
      id: 5,
      path: '',
      img: require('@/images/thumb/avatar-5.jpg'),
      authorName: 'CoolThings',
      numText: '6,593.91',
      numTextTwo: '33.78%',
      numTextThree: '22.32%',
      numTextFour: '4.5',
      numTextFive: '6.5k',
      numTextSix: '53.3k'
    }, {
      id: 6,
      path: '',
      img: require('@/images/thumb/avatar-6.jpg'),
      authorName: 'DigiPunks',
      numText: '6,593.91',
      numTextTwo: '33.78%',
      numTextThree: '22.32%',
      numTextFour: '4.5',
      numTextFive: '6.5k',
      numTextSix: '53.3k'
    }]
  },
  // wallet data
  walletData: [{
    id: 1,
    img: require('@/images/brand/metamask.svg'),
    title: 'Metamask',
    content: 'Start exploring blockchain applications in seconds. Trusted by over 1 million users worldwide.',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 2,
    img: require('@/images/brand/bitski.svg'),
    title: 'Bitski',
    content: 'Bitski connects communities, creators and brands through unique, ownable digital content.',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 3,
    img: require('@/images/brand/fortmatic.svg'),
    title: 'Fortmatic',
    content: 'Let users access your Ethereum app from anywhere. No more browser extensions ellipsis.',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 4,
    img: require('@/images/brand/torus.svg'),
    title: 'Torus',
    content: 'Open source protocol for connecting decentralised applications to mobile wallets.',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 5,
    img: require('@/images/brand/coinbase.svg'),
    title: 'Coinbase',
    content: 'The easiest and most secure crypto wallet. No Coinbase account required to connect EnftyMart.',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 6,
    img: require('@/images/brand/wallet-connect.svg'),
    title: 'WalletConnect',
    content: 'Open source protocol for connecting decentralised applications to mobile wallets.',
    btnText: 'Connect',
    path: 'login'
  }],
  walletDataTwo: [{
    id: 1,
    img: require('@/images/brand/metamask.svg'),
    title: 'Metamask',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 2,
    img: require('@/images/brand/bitski.svg'),
    title: 'Bitski',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 3,
    img: require('@/images/brand/fortmatic.svg'),
    title: 'Fortmatic',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 4,
    img: require('@/images/brand/torus.svg'),
    title: 'Torus',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 5,
    img: require('@/images/brand/coinbase.svg'),
    title: 'Coinbase',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 6,
    img: require('@/images/brand/wallet-connect.svg'),
    title: 'WalletConnect',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 7,
    img: require('@/images/brand/bitski.svg'),
    title: 'Portis',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 8,
    img: require('@/images/brand/wallet-connect.svg'),
    title: 'Fortmatic',
    btnText: 'Connect',
    path: 'login'
  }, {
    id: 9,
    img: require('@/images/brand/wallet-connect.svg'),
    title: 'Kaikas',
    btnText: 'Connect',
    path: 'login'
  }],
  commentData: {
    title: '3 Comments',
    commentList: [{
      id: 1,
      title: 'Olivia',
      img: require('@/images/thumb/avatar.jpg'),
      date: '15 January 2020',
      content: 'It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.',
      btnText: 'Reply',
      replyList: [{
        id: 1,
        title: 'John Smith',
        img: require('@/images/thumb/avatar-2.jpg'),
        date: '23 Feb 2020',
        content: 'It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.',
        btnText: 'Reply'
      }]
    }, {
      id: 2,
      title: 'Mark Hardson',
      img: require('@/images/thumb/avatar-3.jpg'),
      date: '22 Jun 2020',
      content: 'It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.',
      btnText: 'Reply'
    }]
  },
  formData: {
    title: 'Leave a Comment',
    content: 'Your email address will not be published. Required fields are marked *'
  },
  forgot: {
    img: require('@/images/thumb/remote.png'),
    title: 'Forgot Password',
    subTitle: 'Enter Email to reset password',
    btnText: 'Submit',
    haveAccountText: "Don't have an account",
    btnTextTwo: 'Sign Up',
    btnTextLink: 'register'
  },
  reset: {
    img: require('@/images/thumb/remote.png'),
    title: 'Reset Password',
    subTitle: 'Enter your new password',
    btnText: 'Change Password',
    haveAccountText: "Don't have an account",
    btnTextTwo: 'Sign Up',
    btnTextLink: 'register'
  },
  loginData: {
    img: require('@/images/thumb/remote.png'),
    title: 'Welcome Back!',
    subTitle: 'Login to continue',
    btnText: 'Login Now',
    haveAccountText: "Don't have an account",
    btnTextTwo: 'Sign Up',
    btnTextLink: 'register',
    btns: [{
      title: 'Google',
      btnClass: 'bg-red-100 text-red g-btn',
      icon: 'ni-google',
      path: ''
    }, {
      title: 'Facebook',
      btnClass: 'bg-blue-100 text-blue f-btn',
      icon: 'ni-facebook-f',
      path: ''
    }, {
      title: 'Linked in',
      btnClass: 'bg-teal-100 text-teal t-btn',
      icon: 'ni-linkedin',
      path: ''
    }]
  },
  // login tab nav
  loginTabNav: [{
    id: 1,
    isActive: 'active',
    img: require('@/images/brand/metamask.svg'),
    title: 'MetaMask',
    slug: 'meta-mask-tab',
    bsTarget: '#meta-mask'
  }, {
    id: 2,
    img: require('@/images/brand/wallet-connect.svg'),
    title: 'Walletconnect',
    slug: 'wallet-connect-tab',
    bsTarget: '#wallet-connect'
  }],
  // login data two
  loginDataTwo: {
    title: 'Connect Your MetaMask Wallet',
    titleTwo: 'Connect Your Walletconnect Wallet',
    btnText: 'Sign In',
    btnTextTwo: 'Learn how to use MetaMask Wallet',
    btnTextThree: 'Learn how to use Walletconnect Wallet',
    btnTextLink: '',
    btnLink: 'login'
  },
  // register data
  registerData: {
    img: require('@/images/thumb/remote-2.png'),
    title: 'Pendaftaran Anggota <span class="text-primary">PPLI</span>',
    subTitle: 'Fill up the below fields to create an account',
    termText: 'By signing up, you agree to our',
    btnText: 'Create an Account',
    haveAccountText: "Already have an account",
    btnTextTwo: 'Login',
    btnTextLink: 'login',
    btns: [{
      title: 'Google',
      btnClass: 'bg-red-100 text-red g-btn',
      icon: 'ni-google',
      path: ''
    }, {
      title: 'Facebook',
      btnClass: 'bg-blue-100 text-blue f-btn',
      icon: 'ni-facebook-f',
      path: ''
    }, {
      title: 'Linked in',
      btnClass: 'bg-teal-100 text-teal t-btn',
      icon: 'ni-linkedin',
      path: ''
    }]
  },
  // contact data
  contactData: {
    title: 'Contact Us',
    titleTwo: 'Temukan Kami Di Sini',
    subTitle: "Punya pertanyaan? Butuh bantuan? Jangan ragu, hubungi kami",
    btnText: 'Send Message',
    content: '',
    contactList: [{
      id: 1,
      icon: 'ni-mobile',
      title: 'Phone:',
      subTitle: '(123) 123-456'
    }, {
      id: 2,
      icon: 'ni-globe',
      title: 'Web:',
      subTitle: 'www.softnio.com'
    }, {
      id: 3,
      icon: 'ni-mail',
      title: 'Email:',
      subTitle: 'office@softnio.com'
    }]
  },
  sidebarData: {
    sidebarWidget: {
      title: 'Search',
      inputText: 'Search post'
    },
    sidebarWidgetTwo: {
      title: 'Kamran Ahmed',
      img: require('@/images/thumb/avatar-4.jpg'),
      content: 'I make art with the simple goal of giving you something pleasing to look at for a few seconds.',
      icons: [{
        id: 1,
        icon: 'ni-facebook-f',
        path: ''
      }, {
        id: 2,
        icon: 'ni-twitter',
        path: ''
      }, {
        id: 3,
        icon: 'ni-instagram',
        path: ''
      }, {
        id: 4,
        icon: 'ni-pinterest',
        path: ''
      }]
    },
    sidebarWidgetThree: {
      title: 'Categories',
      catList: [{
        id: 1,
        title: 'Art',
        path: '/blog'
      }, {
        id: 2,
        title: ' Virtual Worlds',
        path: '/blog'
      }, {
        id: 3,
        title: 'Collectibles',
        path: '/blog'
      }, {
        id: 4,
        title: 'Music',
        path: '/blog'
      }, {
        id: 5,
        title: 'Games',
        path: '/blog'
      }, {
        id: 6,
        title: 'Domains',
        path: '/blog'
      }, {
        id: 7,
        title: 'Memes',
        path: '/blog'
      }]
    },
    sidebarWidgetFour: {
      title: 'Recent Post',
      postList: [{
        id: 1,
        img: require('@/images/thumb/small-img.jpg'),
        title: 'Announcing Our $100m Raise',
        date: 'July 13, 2021',
        path: '/blog'
      }, {
        id: 2,
        img: require('@/images/thumb/small-img-2.jpg'),
        title: 'Edition365: A Portrait Of The Year That',
        date: 'July 13, 2021',
        path: '/blog'
      }, {
        id: 3,
        img: require('@/images/thumb/small-img-3.jpg'),
        title: 'Artist interview: Arran Schonberg',
        date: 'July 13, 2021',
        path: '/blog'
      }]
    },
    sidebarWidgetFive: {
      title: 'Tags',
      tagList: [{
        id: 1,
        title: 'Virtual World',
        path: '/blog'
      }, {
        id: 2,
        title: 'Art',
        path: '/blog'
      }, {
        id: 3,
        title: 'Vision',
        path: '/blog'
      }, {
        id: 4,
        title: 'Music',
        path: '/blog'
      }, {
        id: 5,
        title: 'Domains',
        path: '/blog'
      }, {
        id: 6,
        title: 'Print',
        path: '/blog'
      }, {
        id: 7,
        title: 'Programming',
        path: '/blog'
      }]
    }
  },
  // profile data
  profileData: {
    title: 'Your all items',
    items: [{
      id: 1,
      img: require('@/images/thumb/nft-2.jpg'),
      title: 'One Tribe Black Edition',
      byText: 'By',
      authorText: 'ZeniconStudio',
      authorLink: '/author',
      priceText: 'Price',
      givenPrice: '$14.20',
      priceTextTwo: 'Current bid',
      currentPrice: '1.32 ETH',
      btnText: 'Place Bid',
      path: '/product-details-v1-1'
    }, {
      id: 2,
      img: require('@/images/thumb/nft3.jpg'),
      title: 'Operation Jade Fury',
      byText: 'By',
      authorText: 'ZeniconStudio',
      authorLink: '/author',
      priceText: 'Price',
      givenPrice: '$14.20',
      priceTextTwo: 'Current bid',
      currentPrice: '1.32 ETH',
      btnText: 'Place Bid',
      path: '/product-details-v1-1',
      btnTextTwo: 'Follow'
    }, {
      id: 3,
      img: require('@/images/thumb/nft4.jpg'),
      title: 'Unboxing The Compass',
      byText: 'By',
      authorText: 'ZeniconStudio',
      authorLink: '/author',
      priceText: 'Price',
      givenPrice: '$14.20',
      priceTextTwo: 'Current bid',
      currentPrice: '1.32 ETH',
      btnText: 'Place Bid',
      path: '/product-details-v1-1',
      btnTextTwo: 'Follow'
    }, {
      id: 4,
      img: require('@/images/thumb/nft5.jpg'),
      title: 'Rendering by the Water',
      byText: 'By',
      authorText: 'ZeniconStudio',
      authorLink: '/author',
      priceText: 'Price',
      givenPrice: '$14.20',
      priceTextTwo: 'Current bid',
      currentPrice: '1.32 ETH',
      btnText: 'Place Bid',
      path: '/product-details-v1-1',
      btnTextTwo: 'Follow'
    }, {
      id: 5,
      img: require('@/images/thumb/nft6.jpg'),
      title: 'Divine Opulence',
      byText: 'By',
      authorText: 'DvisionNetwork',
      authorLink: '/author',
      priceText: 'Price',
      givenPrice: '$12.00',
      priceTextTwo: 'Current bid',
      currentPrice: '1.44 ETH',
      btnText: 'Place Bid',
      path: '/product-details-v1-1',
      btnTextTwo: 'Follow'
    }, {
      id: 6,
      img: require('@/images/thumb/nft7.jpg'),
      title: 'Sacral Metatron Cube',
      byText: 'By',
      authorText: 'KamranMedia',
      authorLink: '/author',
      priceText: 'Price',
      givenPrice: '$11.00',
      priceTextTwo: 'Current bid',
      currentPrice: '2.33 ETH',
      btnText: 'Place Bid',
      path: '/product-details-v1-1',
      btnTextTwo: 'Follow'
    }]
  },
  // filter cat data
  filterCatData: {
    title: 'Category',
    catList: [{
      class: 'active',
      title: 'All',
      path: ''
    }, {
      title: 'Artworks',
      path: ''
    }, {
      title: 'Photography',
      path: ''
    }, {
      title: 'Games',
      path: ''
    }, {
      title: 'Metaverses',
      path: ''
    }, {
      title: 'Music',
      path: ''
    }, {
      title: 'Memes',
      path: ''
    }, {
      title: 'Punks',
      path: ''
    }, {
      title: 'Domains',
      path: ''
    }]
  },
  socialShareList: [{
    title: 'Facebook',
    path: '',
    btnClass: 'ni-facebook-f'
  }, {
    title: 'Twitter',
    path: '',
    btnClass: 'ni-twitter'
  }, {
    title: 'Instagram',
    path: '',
    btnClass: 'ni-instagram'
  }, {
    title: 'Email',
    path: '',
    btnClass: 'ni-emails'
  }],
  placeBidModal: {
    title: 'Place a Bid',
    content: 'You are about to place a bid for <strong>The Future is Blossoming - Harlows 2021</strong> from <strong>Nathan walls</strong>',
    labelText: 'Your bid (ETH)',
    labelTextTwo: 'Enter quantity <span class="text-primary">5 available</span>',
    totalBidList: [{
      title: 'Your bidding balance',
      price: '0.013325 ETH'
    }, {
      title: 'Your balance',
      price: '10.67856 ETH'
    }, {
      title: 'Service fee 3.5%',
      price: '0.00325 ETH'
    }, {
      title: 'You will pay',
      price: '0.013325 ETH'
    }],
    btnText: 'Place a Bid',
    btnLink: 'wallet'
  },
  reportModalData: {
    title: 'Why are you reporting?',
    content: "If you believe there's been a violation of EnftyMart's Terms of Service or Community Guidelines, please complete this report.",
    contentTwo: "For all cases related to potential copyright infringement, please email <a href=\"mailto:trust@enftymart.com\">trust@enftymart.com</a> directly with a formal DMCA Takedown Request.",
    placeholderText: 'Describe why you think this page should be removed from EnftyMart.',
    btnText: 'Submit'
  },
  messageModalData: {
    title: 'Why are you reporting?',
    content: "If you believe there's been a violation of EnftyMart's Terms of Service or Community Guidelines, please complete this report.",
    contentTwo: "For all cases related to potential copyright infringement, please email <a href=\"mailto:trust@enftymart.com\">trust@enftymart.com</a> directly with a formal DMCA Takedown Request.",
    placeholderText: 'Describe why you think this page should be removed from EnftyMart.',
    btnText: 'Submit'
  },
  followersModal: {
    title: 'Why are you reporting?',
    btnText: 'Following',
    btnTextTwo: 'Followers',
    followingList: [{
      id: 1,
      title: 'Alex Smith',
      userName: '@alex_smith',
      path: '',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      btnText: 'Follow'
    }, {
      id: 2,
      title: 'Digital Monkey',
      userName: '@digital_monkey',
      path: '',
      avatar: require('@/images/thumb/avatar.jpg'),
      btnText: 'Follow'
    }, {
      id: 3,
      title: 'Beejaey',
      userName: '@beejaey',
      path: '',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      btnText: 'Follow'
    }, {
      id: 4,
      title: 'Tom Dracula',
      userName: '@tom_dracula',
      path: '',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      btnText: 'Follow'
    }, {
      id: 5,
      title: 'Kevin Martin',
      userName: '@kevin_martin',
      path: '',
      avatar: require('@/images/thumb/avatar-5.jpg'),
      btnText: 'Follow'
    }],
    followerList: [{
      id: 1,
      title: 'Digital Monkey',
      userName: '@digital_monkey',
      path: '',
      avatar: require('@/images/thumb/avatar.jpg'),
      btnText: 'Follow'
    }, {
      id: 2,
      title: 'Beejaey',
      userName: '@beejaey',
      path: '',
      avatar: require('@/images/thumb/avatar-2.jpg'),
      btnText: 'Follow'
    }, {
      id: 3,
      title: 'Tom Dracula',
      userName: '@tom_dracula',
      path: '',
      avatar: require('@/images/thumb/avatar-3.jpg'),
      btnText: 'Follow'
    }, {
      id: 4,
      title: 'Kevin Martin',
      userName: '@kevin_martin',
      path: '',
      avatar: require('@/images/thumb/avatar-5.jpg'),
      btnText: 'Follow'
    }, {
      id: 5,
      title: 'Alex Smith',
      userName: '@alex_smith',
      path: '',
      avatar: require('@/images/thumb/avatar-4.jpg'),
      btnText: 'Follow'
    }]
  },
  // activity nav list
  activityNavList: [{
    id: 1,
    class: 'active',
    icon: require('@/images/thumb/all.svg'),
    title: 'All',
    slug: 'all-tab',
    bsTarget: '#all'
  }, {
    id: 2,
    icon: require('@/images/thumb/art.svg'),
    title: 'Art',
    slug: 'art-tab',
    bsTarget: '#art'
  }, {
    id: 3,
    icon: require('@/images/thumb/virtual-world.svg'),
    title: 'Virtual Worlds',
    slug: 'virtual-worlds-tab',
    bsTarget: '#virtual-worlds'
  }, {
    id: 4,
    icon: require('@/images/thumb/icon4.svg'),
    title: 'Trending Cards',
    slug: 'trending-cards-tab',
    bsTarget: '#trending-cards'
  }, {
    id: 5,
    icon: require('@/images/thumb/icon5.svg'),
    title: 'Collectibles',
    slug: 'collectibles-tab',
    bsTarget: '#collectibles'
  }, {
    id: 6,
    icon: require('@/images/thumb/icon6.svg'),
    title: 'Utility',
    slug: 'utility-tab',
    bsTarget: '#utility'
  }],
  // activity table head
  activityTableHead: ['Event', 'Item', 'Unit Price', 'Quantity', 'From', 'To', 'Date'],
  // activity table body
  activityTableBody: {
    tableBodyList: [{
      id: 1,
      eventTitle: 'Created',
      itemTitle: 'The Cost" 09.27.2021, Debut Single',
      price: '0.001',
      quantity: 1,
      fromText: '	lucifer',
      toText: 'MackMoli',
      dateText: '1 day ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 2,
      eventTitle: 'Created',
      itemTitle: 'Fragment',
      price: '-',
      quantity: 0,
      fromText: 'NullAddress',
      toText: 'ValourKnight	',
      dateText: '2 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 3,
      eventTitle: 'Sale',
      itemTitle: 'RSA Cannabis',
      price: '0.02',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'amber',
      dateText: '3 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 4,
      eventTitle: 'List',
      itemTitle: 'Childhood Astronaut',
      price: '120',
      quantity: 1,
      fromText: 'ValourKnight',
      toText: 'noel',
      dateText: '4 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 5,
      eventTitle: 'Bid',
      itemTitle: 'Hunter x Hunter',
      price: '0.2',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'ValourKnight	',
      dateText: '5 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 6,
      eventTitle: 'Transfer',
      itemTitle: 'HSong1',
      price: '0.002',
      quantity: 1,
      fromText: 'lucifer',
      toText: 'NullAddress',
      dateText: '1 week ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 7,
      eventTitle: 'Bid Cancelled',
      itemTitle: 'AN EPIC AUTOGRAPHED BOLLYWOOD FILM POSTER!',
      price: '-',
      quantity: 1,
      fromText: '0x_arr1975k_29',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 8,
      eventTitle: 'Cancelled',
      itemTitle: 'Sunset #1',
      price: '-',
      quantity: 1,
      fromText: 'amber',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }],
    tableBodyListTwo: [{
      id: 1,
      eventTitle: 'Created',
      itemTitle: 'Cassanjo Project',
      price: '0.012',
      quantity: 1,
      fromText: '	lucifer',
      toText: 'MackMoli',
      dateText: '1 day ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 2,
      eventTitle: 'Created',
      itemTitle: 'Blue teddy bear #23|50',
      price: '-',
      quantity: 0,
      fromText: 'NullAddress',
      toText: 'ValourKnight	',
      dateText: '2 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 3,
      eventTitle: 'Sale',
      itemTitle: 'RSA Cannabis',
      price: '0.02',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'amber',
      dateText: '3 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 4,
      eventTitle: 'List',
      itemTitle: 'Childhood Astronaut',
      price: '120',
      quantity: 1,
      fromText: 'ValourKnight',
      toText: 'noel',
      dateText: '4 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 5,
      eventTitle: 'Bid',
      itemTitle: 'Hunter x Hunter',
      price: '0.2',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'ValourKnight	',
      dateText: '5 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 6,
      eventTitle: 'Transfer',
      itemTitle: 'HSong1',
      price: '0.002',
      quantity: 1,
      fromText: 'lucifer',
      toText: 'NullAddress',
      dateText: '1 week ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 7,
      eventTitle: 'Bid Cancelled',
      itemTitle: 'AN EPIC AUTOGRAPHED BOLLYWOOD FILM POSTER!',
      price: '-',
      quantity: 1,
      fromText: '0x_arr1975k_29',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 8,
      eventTitle: 'Cancelled',
      itemTitle: 'Sunset #1',
      price: '-',
      quantity: 1,
      fromText: 'amber',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }],
    tableBodyListThree: [{
      id: 1,
      eventTitle: 'Created',
      itemTitle: 'Deep Sea Phantasy',
      price: '0.001',
      quantity: 1,
      fromText: '	lucifer',
      toText: 'MackMoli',
      dateText: '1 day ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 2,
      eventTitle: 'Created',
      itemTitle: 'Blue teddy bear #23|50',
      price: '-',
      quantity: 0,
      fromText: 'NullAddress',
      toText: 'ValourKnight	',
      dateText: '2 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 3,
      eventTitle: 'Sale',
      itemTitle: 'RSA Cannabis',
      price: '0.02',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'amber',
      dateText: '3 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 4,
      eventTitle: 'List',
      itemTitle: 'Childhood Astronaut',
      price: '120',
      quantity: 1,
      fromText: 'ValourKnight',
      toText: 'noel',
      dateText: '4 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 5,
      eventTitle: 'Bid',
      itemTitle: 'Hunter x Hunter',
      price: '0.2',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'ValourKnight	',
      dateText: '5 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 6,
      eventTitle: 'Transfer',
      itemTitle: 'HSong1',
      price: '0.002',
      quantity: 1,
      fromText: 'lucifer',
      toText: 'NullAddress',
      dateText: '1 week ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 7,
      eventTitle: 'Bid Cancelled',
      itemTitle: 'AN EPIC AUTOGRAPHED BOLLYWOOD FILM POSTER!',
      price: '-',
      quantity: 1,
      fromText: '0x_arr1975k_29',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 8,
      eventTitle: 'Cancelled',
      itemTitle: 'Sunset #1',
      price: '-',
      quantity: 1,
      fromText: 'amber',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }],
    tableBodyListFour: [{
      id: 1,
      eventTitle: 'Created',
      itemTitle: 'Cute Astronout',
      price: '0.012',
      quantity: 1,
      fromText: '	lucifer',
      toText: 'MackMoli',
      dateText: '1 day ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 2,
      eventTitle: 'Created',
      itemTitle: 'Blue teddy bear #23|50',
      price: '-',
      quantity: 0,
      fromText: 'NullAddress',
      toText: 'ValourKnight	',
      dateText: '2 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 3,
      eventTitle: 'Sale',
      itemTitle: 'RSA Cannabis',
      price: '0.02',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'amber',
      dateText: '3 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 4,
      eventTitle: 'List',
      itemTitle: 'Childhood Astronaut',
      price: '120',
      quantity: 1,
      fromText: 'ValourKnight',
      toText: 'noel',
      dateText: '4 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 5,
      eventTitle: 'Bid',
      itemTitle: 'Hunter x Hunter',
      price: '0.2',
      quantity: 1,
      fromText: 'rohendra',
      toText: 'ValourKnight	',
      dateText: '5 days ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 6,
      eventTitle: 'Transfer',
      itemTitle: 'HSong1',
      price: '0.002',
      quantity: 1,
      fromText: 'lucifer',
      toText: 'NullAddress',
      dateText: '1 week ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 7,
      eventTitle: 'Bid Cancelled',
      itemTitle: 'AN EPIC AUTOGRAPHED BOLLYWOOD FILM POSTER!',
      price: '-',
      quantity: 1,
      fromText: '0x_arr1975k_29',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }, {
      id: 8,
      eventTitle: 'Cancelled',
      itemTitle: 'Sunset #1',
      price: '-',
      quantity: 1,
      fromText: 'amber',
      toText: '',
      dateText: '3 weeks ago',
      fromLink: '',
      toLink: ''
    }]
  },
  // footer data
  footerData: {
    title: "Follow Us",
    content: "Social Media Kami",
    footerList: [{
      id: 1,
      title: 'Company',
      navList: [{
        title: 'About Us',
        path: 'about-us'
      }, {
        title: 'Blog',
        path: 'blog'
      }, {
        title: 'Careers',
        path: 'about-us'
      }, {
        title: 'Privacy Policy',
        path: 'contact'
      }, {
        title: 'Pricing',
        path: 'contact'
      }, {
        title: 'Terms & Conditions',
        path: 'contact'
      }]
    }, {
      id: 2,
      title: 'Our Partner',
      navList: [{
        title: 'SOLOG',
        path: '/solog'
      }, {
        title: 'FAQs',
        path: '/faq'
      }, {
        title: 'Fleet Sumo',
        path: '/fleetsumo'
      }]
    }, {
      id: 3,
      title: 'Browse Providers',
      navList: [{
        title: 'Forwarders',
        path: 'profile'
      }, {
        title: 'Warehouses',
        path: 'offers'
      }, {
        title: 'Trucks',
        path: 'activity'
      }]
    }]
  },
  copyTitle: 'Copyright © 2022 Pilar Media.'
};
export default SectionData;"},null]}