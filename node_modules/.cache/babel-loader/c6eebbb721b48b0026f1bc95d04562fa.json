{"remainingRequest":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\babel-loader\\lib\\index.js!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!E:\\Codeee\\PPLI FE BE\\PPLI\\src\\components\\common\\MobileActionTwo.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\src\\components\\common\\MobileActionTwo.vue","mtime":1659027321908},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\babel.config.js","mtime":1657682266000},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657682274000},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1657682290000},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\babel-loader\\lib\\index.js","mtime":1657682274000},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657682274000},{"path":"E:\\Codeee\\PPLI FE BE\\PPLI\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1657682290000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gSW1wb3J0IGNvbXBvbmVudCBkYXRhLiBZb3UgY2FuIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgdG8gcmVmbGVjdCBpbiBhbGwgY29tcG9uZW50CmltcG9ydCBTZWN0aW9uRGF0YSBmcm9tICdAL3N0b3JlL3N0b3JlLmpzJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdNb2JpbGVBY3Rpb24nLAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgU2VjdGlvbkRhdGEsCiAgICAgIGRhdGE6ICcnLAogICAgICAvLyBsb2dpblR5cGU6ICcnLAogICAgICB1c2VyOiBudWxsLAogICAgICBpc0xvZ2dlZEluOiBmYWxzZQogICAgfTsKICB9LAoKICBjcmVhdGVkKCkgewogICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nOwogICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdCZWFyZXIgJyArIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpOwogICAgYXhpb3MuZ2V0KGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL21lYCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgIHRoaXMuZGF0YSA9IHJlc3BvbnNlLmRhdGE7IC8vIHRoaXMubG9naW5UeXBlID0gcmVzcG9uc2UuZGF0YS5yb2xlc1swXS5uYW1lCiAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgIGlmIChlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgewogICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpOwogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvbG9naW4nKTsKICAgICAgfQoKICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICB9KTsKICB9LAoKICBtb3VudGVkKCkgewogICAgdGhpcy5zZXRVc2VyKCk7IC8vIHNsaWRlVXAKCiAgICBsZXQgc2xpZGVVcCA9ICh0YXJnZXQsIGR1cmF0aW9uID0gNTAwKSA9PiB7CiAgICAgIHRhcmdldC5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSAnaGVpZ2h0LCBtYXJnaW4sIHBhZGRpbmcnOwogICAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb24gKyAnbXMnOwogICAgICB0YXJnZXQuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnOwogICAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gdGFyZ2V0Lm9mZnNldEhlaWdodCArICdweCc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMKCiAgICAgIHRhcmdldC5vZmZzZXRIZWlnaHQ7CiAgICAgIHRhcmdldC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nOwogICAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gMDsKICAgICAgdGFyZ2V0LnN0eWxlLnBhZGRpbmdUb3AgPSAwOwogICAgICB0YXJnZXQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IDA7CiAgICAgIHRhcmdldC5zdHlsZS5tYXJnaW5Ub3AgPSAwOwogICAgICB0YXJnZXQuc3R5bGUubWFyZ2luQm90dG9tID0gMDsKICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIHRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnaGVpZ2h0Jyk7CiAgICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLXRvcCcpOwogICAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy1ib3R0b20nKTsKICAgICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ21hcmdpbi10b3AnKTsKICAgICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ21hcmdpbi1ib3R0b20nKTsKICAgICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ292ZXJmbG93Jyk7CiAgICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0cmFuc2l0aW9uLWR1cmF0aW9uJyk7CiAgICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0cmFuc2l0aW9uLXByb3BlcnR5Jyk7CiAgICAgIH0sIGR1cmF0aW9uKTsKICAgIH07IC8vIHNsaWRlRG93bgoKCiAgICBsZXQgc2xpZGVEb3duID0gKHRhcmdldCwgZHVyYXRpb24gPSA1MDApID0+IHsKICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7CiAgICAgIGxldCBkaXNwbGF5ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5kaXNwbGF5OwogICAgICBpZiAoZGlzcGxheSA9PT0gJ25vbmUnKSBkaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgdGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5OwogICAgICBsZXQgaGVpZ2h0ID0gdGFyZ2V0Lm9mZnNldEhlaWdodDsKICAgICAgdGFyZ2V0LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7CiAgICAgIHRhcmdldC5zdHlsZS5oZWlnaHQgPSAwOwogICAgICB0YXJnZXQuc3R5bGUucGFkZGluZ1RvcCA9IDA7CiAgICAgIHRhcmdldC5zdHlsZS5wYWRkaW5nQm90dG9tID0gMDsKICAgICAgdGFyZ2V0LnN0eWxlLm1hcmdpblRvcCA9IDA7CiAgICAgIHRhcmdldC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zCgogICAgICB0YXJnZXQub2Zmc2V0SGVpZ2h0OwogICAgICB0YXJnZXQuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnOwogICAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gJ2hlaWdodCwgbWFyZ2luLCBwYWRkaW5nJzsKICAgICAgdGFyZ2V0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uICsgJ21zJzsKICAgICAgdGFyZ2V0LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7CiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy10b3AnKTsKICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLWJvdHRvbScpOwogICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ21hcmdpbi10b3AnKTsKICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXJnaW4tYm90dG9tJyk7CiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpOwogICAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnb3ZlcmZsb3cnKTsKICAgICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RyYW5zaXRpb24tZHVyYXRpb24nKTsKICAgICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RyYW5zaXRpb24tcHJvcGVydHknKTsKICAgICAgfSwgZHVyYXRpb24pOwogICAgfTsgLy8gc2xpZGVUb2dnbGUKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycwoKCiAgICB2YXIgc2xpZGVUb2dnbGUgPSAodGFyZ2V0LCBkdXJhdGlvbiA9IDUwMCkgPT4gewogICAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5kaXNwbGF5ID09PSAnbm9uZScpIHsKICAgICAgICByZXR1cm4gc2xpZGVEb3duKHRhcmdldCwgZHVyYXRpb24pOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBzbGlkZVVwKHRhcmdldCwgZHVyYXRpb24pOwogICAgICB9CiAgICB9OyAvLyB2YXJpYWJsZXMgZm9yIG1lbnUKCgogICAgY29uc3QgX25hdmJhciA9ICdoZWFkZXItbWVudSc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2UKCiAgICBjb25zdCBfbmF2YmFyX3RvZ2dsZSA9ICdtZW51LXRvZ2dsZXInOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlCgogICAgY29uc3QgX25hdmJhcl9hY3RpdmUgPSAnYWN0aXZlJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQoKICAgIGNvbnN0IF9uYXZiYXJfZml4ZWQgPSAnaGFzLWZpeGVkJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQoKICAgIGNvbnN0IF9uYXZiYXJfbW9iaWxlID0gJ21vYmlsZS1tZW51JzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQoKICAgIGNvbnN0IF9uYXZiYXJfYnJlYWsgPSA5OTI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2UKCiAgICBjb25zdCBfbWVudV90b2dnbGUgPSAnbWVudS10b2dnbGUnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlCgogICAgY29uc3QgX21lbnVfc3ViID0gJ21lbnUtc3ViJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQoKICAgIGNvbnN0IF9tZW51X2FjdGl2ZSA9ICdhY3RpdmUnOwogICAgY29uc3QgbmF2YmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBfbmF2YmFyKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQoKICAgIGNvbnN0IG5hdmJhcl90b2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIF9uYXZiYXJfdG9nZ2xlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQoKICAgIGNvbnN0IG1lbnVfdG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBfbWVudV90b2dnbGUpOyAvLyBUb2dnbGUgRHJvcGRvd24gTWVudQoKICAgIGZ1bmN0aW9uIHRvZ2dsZURyb3Bkb3duKHBhcmVudCwgc3ViTWVudSwgX2FjdGl2ZSkgewogICAgICBpZiAoIXBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoX2FjdGl2ZSkpIHsKICAgICAgICBwYXJlbnQuY2xhc3NMaXN0LmFkZChfYWN0aXZlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCgogICAgICAgIHNsaWRlRG93bihzdWJNZW51KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShfYWN0aXZlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCgogICAgICAgIHNsaWRlVXAoc3ViTWVudSk7CiAgICAgIH0KICAgIH0gLy8gQ2xvc2UgRHJvcGRvd24gTWVudSBTaWJsaW5ncwoKCiAgICBmdW5jdGlvbiBjbG9zZURyb3Bkb3duU2libGluZ3Moc2libGluZ3MsIG1lbnUsIF9zdWIsIF9hY3RpdmUpIHsKICAgICAgQXJyYXkuZnJvbShzaWJsaW5ncykuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICBpZiAoaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoX2FjdGl2ZSkgJiYgIW1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKF9hY3RpdmUpKSB7CiAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoX2FjdGl2ZSk7CiAgICAgICAgICBBcnJheS5mcm9tKGl0ZW0uY2hpbGRyZW4pLmZvckVhY2goc3ViSXRlbSA9PiB7CiAgICAgICAgICAgIGlmIChzdWJJdGVtLmNsYXNzTGlzdC5jb250YWlucyhfc3ViKSkgewogICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgogICAgICAgICAgICAgIHNsaWRlVXAoc3ViSXRlbSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IC8vIERyb3Bkb3duIE1lbnUKCgogICAgZnVuY3Rpb24gbWVudURyb3Bkb3duKHRvZ2dsZSwgX3N1YiwgX2FjdGl2ZSkgewogICAgICB0b2dnbGUuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgIGxldCBpdGVtUGFyZW50ID0gaXRlbS5wYXJlbnRFbGVtZW50OwogICAgICAgICAgbGV0IGl0ZW1TaWJsaW5nID0gaXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7CiAgICAgICAgICBsZXQgaXRlbVBhcmVudFNpYmxpbmdzID0gaXRlbS5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2hpbGRyZW47CiAgICAgICAgICBjbG9zZURyb3Bkb3duU2libGluZ3MoaXRlbVBhcmVudFNpYmxpbmdzLCBpdGVtUGFyZW50LCBfc3ViLCBfYWN0aXZlKTsKICAgICAgICAgIHRvZ2dsZURyb3Bkb3duKGl0ZW1QYXJlbnQsIGl0ZW1TaWJsaW5nLCBfYWN0aXZlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9IC8vIERyb3Bkb3duIE1lbnUgSW5pdAoKCiAgICBtZW51RHJvcGRvd24obWVudV90b2dnbGUsIF9tZW51X3N1YiwgX21lbnVfYWN0aXZlKTsgLy8gbW9iaWxlIG5hdiBjbGFzcyBhZGQvcmVtb3ZlCgogICAgZnVuY3Rpb24gbW9iaWxlTmF2SW5pdCgpIHsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQogICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPD0gX25hdmJhcl9icmVhaykgewogICAgICAgIG5hdmJhci5jbGFzc0xpc3QuYWRkKF9uYXZiYXJfbW9iaWxlKTsKICAgICAgfQogICAgfQoKICAgIG1vYmlsZU5hdkluaXQoKTsKCiAgICBmdW5jdGlvbiBtb2JpbGVOYXZSZXNpemUoKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2UKICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IF9uYXZiYXJfYnJlYWspIHsKICAgICAgICBuYXZiYXIuY2xhc3NMaXN0LmFkZChfbmF2YmFyX21vYmlsZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmF2YmFyLmNsYXNzTGlzdC5yZW1vdmUoX25hdmJhcl9tb2JpbGUsIF9uYXZiYXJfYWN0aXZlKTsKICAgICAgICBuYXZiYXJfdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoX25hdmJhcl9hY3RpdmUpOwogICAgICB9CiAgICB9CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgbW9iaWxlTmF2UmVzaXplKCk7CiAgICB9KTsKICAgIC8qICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQogICAgTW9iaWxlIG5hdiB0b2dnbGUNCiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgogICAgZnVuY3Rpb24gbW9iaWxlTmF2VG9nZ2xlKCkgewogICAgICBuYXZiYXJfdG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoX25hdmJhcl9hY3RpdmUpOwogICAgICBuYXZiYXIuY2xhc3NMaXN0LnRvZ2dsZShfbmF2YmFyX2FjdGl2ZSk7CiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2UKCgogICAgaWYgKG5hdmJhcl90b2dnbGUpIHsKICAgICAgbmF2YmFyX3RvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICBtb2JpbGVOYXZUb2dnbGUoKTsKICAgICAgfSk7CiAgICB9CiAgICAvKiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KICAgIE1vYmlsZSBSZW1vdmUgLyBjbG9zZSBuYXYgd2hlbiBvdmVybGF5IGlzIGNsaWNrZWQNCiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgoKICAgIGZ1bmN0aW9uIG5hdk91dFNpZGVDbGljayhldmVudCkgewogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlCiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IG5hdmJhciAmJiBldmVudC50YXJnZXQgIT09IG5hdmJhcl90b2dnbGUgJiYgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQogICAgICBldmVudC50YXJnZXQuY2xvc2VzdCgnLicgKyBfbmF2YmFyKSA9PSBudWxsICYmIGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuJyArIF9uYXZiYXJfdG9nZ2xlKSA9PSBudWxsKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQogICAgICAgIGlmIChuYXZiYXJfdG9nZ2xlKSB7CiAgICAgICAgICBuYXZiYXJfdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoX25hdmJhcl9hY3RpdmUpOwogICAgICAgIH0KCiAgICAgICAgbmF2YmFyLmNsYXNzTGlzdC5yZW1vdmUoX25hdmJhcl9hY3RpdmUpOwogICAgICB9CiAgICB9CgogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgbmF2T3V0U2lkZUNsaWNrKGV2ZW50KTsKICAgIH0pOwogICAgLyogID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiAgICBTdGlja3kgbmF2YmFyIG9uIHNjcm9sbCBkb3duDQogICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKICAgIGZ1bmN0aW9uIHN0aWNreU1lbnUoc2VsZWN0b3IpIHsKICAgICAgbGV0IGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsKCiAgICAgIGlmIChlbGVtLmxlbmd0aCA+IDApIHsKICAgICAgICBlbGVtLmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlCiAgICAgICAgICBsZXQgX2l0ZW1fb2Zmc2V0ID0gaXRlbS5vZmZzZXRUb3A7CiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlCiAgICAgICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA+IF9pdGVtX29mZnNldCkgewogICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChfbmF2YmFyX2ZpeGVkKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoX25hdmJhcl9maXhlZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CgogICAgc3RpY2t5TWVudSgnLmlzLXN0aWNreScpOwogIH0sCgogIG1ldGhvZHM6IHsKICAgIHNldFVzZXIoKSB7CiAgICAgIHRoaXMudXNlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSk7CiAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpICE9IG51bGw7CiAgICB9LAoKICAgIGxvZ291dCgpIHsKICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuJyk7CiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VyJyk7CiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdwZXJtaXNzaW9uJyk7CiAgICAgIHRoaXMuc2V0VXNlcigpOwogICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL2xvZ2luJyk7CiAgICB9CgogIH0KfTs="},null]}